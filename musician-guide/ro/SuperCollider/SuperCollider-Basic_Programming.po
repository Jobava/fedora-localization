# 
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2015-01-06 16:13+1000\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: Romanian\n"
"Language: ro\n"
"X-Generator: Zanata 3.6.2\n"
"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < "
"20)) ? 1 : 2);\n"

#. Tag: title
#, no-c-format
msgid "Basic Programming in <application>SuperCollider</application>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As with any programming language, you will start learning "
"<application>SuperCollider</application> with the basic commands, that are "
"of little use by themselves. However, since the language is so flexible, "
"even the most basic commands can be combined in ways that create highly "
"complex behaviours. The example program, \"Method One,\" was written with "
"the goal of illustrating how a single sound-generating object can be used to "
"create an entire composition. This tutorial does not begin with audio-"
"generating code, which helps to emphasize that <application>SuperCollider</"
"application> is primarily a programming language."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This portion of the Guide is designed as a \"reference textbook,\" which you "
"can use both to learn the <application>SuperCollider</application> language "
"in the first place, and to remind yourself about the language's features "
"afterwards."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The section is most effective when read in small portions."
msgstr ""

#. Tag: title
#, no-c-format
msgid "First Steps"
msgstr ""

#. Tag: title
#, no-c-format
msgid "The Different Parts of <application>SuperCollider</application>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As you discovered when installing <application>SuperCollider</application>, "
"there are actually many different components involved with "
"<application>SuperCollider</application>. Here is a list of some of them, "
"with brief descriptions of their purpose:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Programming language: this is an abstract set of rules and guidelines that "
"allow you to write down instructions for producing sounds."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Interpreter: this is what is run in <application>GEdit</application>; it "
"transforms the programming language instructions written by you into useful "
"instructions for the server; also called the \"client.\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Server: this is what synthesizes the sound, according to instructions sent "
"to it by the interpreter."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Library: these contain commands and the instructions to be executed when you "
"call the commands; the interpreter looks up commands in the library when you "
"call them."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This modular design allows for several advanced capabilities and features. "
"Any particular element could theoretically be replaced without affecting "
"other elements, as long as the methods of communication remain the same. As "
"long as the programming language is the same, portions of the library can be "
"modified, removed, or added at will; this happens often, and Planet CCRMA at "
"Home provides a collection of library extensions. One of the most exciting "
"capabilities is the ability to run the interpreter and server on different "
"physical computers. The networking component is built into these components -"
" they always communicate by UDP or TCP, even when run on the same computer! "
"Although this ability is not used in this Guide, it is not difficult."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The most important thing to remember is that the <application>SuperCollider</"
"application> interpreter is what deals with the programs you write. The "
"<application>SuperCollider</application> server is controlled by the "
"interpreter, but is an independent program. For simple things, like the "
"Hello World Programs below, the server is not even used - after all, there "
"is no audio for it to synthesize."
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"Hello, World!\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The first program that one traditionally makes when learning a new "
"programming language is called \"The Hello World Program.\" This is a simple "
"and trivial application that simply prints outs the phrase, <literal>Hello, "
"World!</literal> (or a variation of it). It might seem useless at first, but "
"the ability to provide feedback to an application's user is very important, "
"and this is essentially what the Hello World Program does."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is the program in <application>SuperCollider</application>:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"\"Hello, World!\".postln;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is an extension to that program:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"\"Hello, World!\".postln;\n"
"\"Hello, SC!\".postln;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As with all examples in this section, you should paste these programs into "
"<application>GEdit</application>, and execute them with "
"<application>SuperCollider</application>. Look at the output produced by the "
"programs, but don't worry about it for now."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"These programs are very small, but it highlights some key concepts of the "
"<application>SuperCollider</application> language, described below."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Return Values"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Every <application>SuperCollider</application> program must provide the "
"interpreter with a value (some information) when it has carried out all of "
"its instructions. This value is called a \"return value,\" because it is the "
"value given by a program when it \"returns\" control to the interpreter. In "
"a <application>SuperCollider</application> program, it is the last value "
"stated in a program that automatically becomes the return value - no special "
"command is required. When program execution ends, and control is returned to "
"the <application>SuperCollider</application> interpreter, the interpreter "
"outputs the return value in the \"SuperCollider output\" pane."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In the single-line Hello World Program above, the program produces the "
"following output: <computeroutput> Hello, World! Hello, World! </"
"computeroutput> The program appears to have been executed twice, but that is "
"not the case. The first <literal>Hello, World!</literal> is printed by the "
"program. The second <literal>Hello, World!</literal> appears because "
"<code>\"Hello, World!.postln</code> is the last (in this case, the only) "
"value of the program. It is \"returned\" by the program, and the interpreter "
"prints it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In the two-line Hello World Program above, the program produces the "
"following output: <computeroutput> Hello, World! Hello, SC! Hello, SC! </"
"computeroutput> This makes it more clear that the program is not being "
"executed twice, and that it is the last value of a program that is returned "
"to the interpreter."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Try executing the following single-line programs. Look at the output "
"produced by each, and determine whether it is printed by the program itself, "
"the interpreter, or both."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>\"Hello, World!\".postln;</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>\"Hello, World!\";</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>5.postln;</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>5;</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Can you modify the two-line Hello World Program so that each line is printed "
"only once?"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In reality, every \"function\" must return a value. Functions are described "
"in <xref linkend=\"sect-Musicians_Guide-SC-Basic_Programming-"
"Variables_and_Functions-Functions\" />, but the difference is not yet "
"important."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Statements"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A \"statement\" is a single instruction, which always ends with a semicolon. "
"Exactly what constitutes a statement will become clear as you gain "
"experience, and you will eventually automatically remember the semicolon."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In the Hello World Programs above, all of the statements contain the single "
"instruction to post a line to the output screen. What happens when you "
"remove the first semicolon, which marks the end of the first statement? The "
"<application>SuperCollider</application> interpreter produces an unhelpful "
"error message, and tells you that an error occurred <emphasis>after</"
"emphasis> the forgotten semicolon. This is why it is important to always "
"remember statement-concluding semicolons."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Data Types: Numbers and Strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In many programming languages, it is the programmer's responsibility to "
"determine the type of data that is being used, and how it should be stored. "
"The <application>SuperCollider</application> interpreter takes advantage of "
"the power of modern computers, and deals with this on our behalf. This "
"greatly simplifies basic tasks, because there are only two kinds of data to "
"worry about, and they make perfect sense:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Numbers: These are numbers, written simply as numbers. Anything that can be "
"done with real-world numbers can also be done with "
"<application>SuperCollider</application>'s numbers. They can be as large or "
"small, positive or negative as you want. They can have any number of digits "
"on either side of the decimal point."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Strings: These are a string of characters, written between two double-quote "
"characters like \"this.\" The double-quote characters are required so that "
"<application>SuperCollider</application> knows where to begin and end the "
"string of characters. A string of character can contain as many characters "
"as you like, including one character and no characters. If you want to "
"include a double-quote character in a string, you should put a blackslash "
"before it. The following is interpreted by <application>SuperCollider</"
"application> as a string with only a double-quote character: "
"<literal>\"\\\"\"</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here are some examples of numbers and strings:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>5</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>18920982341</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>0.00000000000001</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>\"characters\"</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>\"@\"</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>\"\"</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<literal>\"6\"</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Is the last example a number or a string? You and I recognize that it is a "
"number inside a string, but <application>SuperCollider</application> treats "
"it as a string. You can do string things with it, but you cannot do number "
"things with it. You cannot add <literal>\"6\"</literal> to something, for "
"example."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Try executing the following single-line programs. Think about why the "
"<application>SuperCollider</application> interpreter produces the output "
"that it does."
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>6 + 3;</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>\"6\" + 3;</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<code>\"six\" + 3;</code>"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Consecutive Execution"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Complex <application>SuperCollider</application> programs contain many "
"parts, which all do different things. Sometimes, executing all of these "
"together doesn't make sense, and it can be difficult to know which portions "
"of the program are supposed to be executed when. To help with this, the "
"interpreter allows you to mark portions of your program between ( and ) so "
"that you will know to execute them together."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is an example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"  \"Hello, Fred!\".postln;\n"
"  \"Hello, Wilma!\".postln;\n"
")\n"
"(\n"
"  \"Goodbye, Fred!\".postln;\n"
"  \"Goodbye, Wilma!\".postln;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"It doesn't make sense to say \"hello\" and \"goodbye\" at the same time, so "
"separating these sections with parentheses will serve as a reminder. In case "
"we try to execute all of the code at once, the <application>SuperCollider</"
"application> interpreter will give us an error."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Variables and Functions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The concepts in this section are related to the mathematical terms with the "
"same names. This is a modern-day result of the first uses of computers and "
"programming languages: the calculation of complex mathematical problems."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Variables"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A variable is a symbol that can be assigned an arbitrary value. A \"symbol\" "
"is a series of alphabetic and numeric characters, separated by whitespace (a "
"space, a line-break, or the end of the file). When a variable is "
"\"assigned\" a value, the variable name (the symbol) is understood to be a "
"substitute for the assigned value."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Consider a traffic light, which has three possible symbols: green, yellow, "
"and red. When you are driving, and you encounter a traffic light, you might "
"see that its red symbol is activated (the red light is illuminated). What "
"you see is a red light, but you understand that it means you should stop "
"your car. Red lights in general do not make you stop - it is specifically "
"red traffic lights, because we know that it is a symbol meaning to stop."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"SuperCollider's variables work in the same way: you tell the interpreter "
"that you want to use a symbol, like <literal>cheese</literal>. Then you "
"assign <literal>cheese</literal> a value, like <literal>5</literal>. After "
"that point, whenever you use <literal>cheese</literal>, the interpreter will "
"automatically know that what you really mean is <literal>5</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Run the following two programs. They should result in the same output."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"(\n"
"  5 + 5;\n"
")\n"
"(\n"
"  var x;\n"
"  x = 5;\n"
"  x + x;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In the first example, the program calculates the value of <code>5 + 5</"
"code>, which is <literal>10</literal>, and returns that to the interpreter, "
"which prints it out. In the second example, the program tells the "
"interpreter that it wants to use a variable called <literal>x</literal> then "
"it assigns cheese the value <literal>5</literal>. Finally, the program "
"calculates <code>cheese + cheese</code>, which it understands as meaning "
"<code>5 + 5</code>, and returns <literal>10</literal> to the interpreter, "
"which prints it out."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This trivial use of a variable does nothing but complicate the process of "
"adding 5 to itself. Soon you will see that variables can greatly simplify "
"your programs."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using Variables"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are three words that describe the key stages of using a variable: "
"declaration, initialization, and assignment."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A variable must be declared before use, so that the interpreter knows that "
"you want to use that symbol as a variable. All variables must be declared "
"before any statement that does not declare a variable; in other words, you "
"should declare your variables before doing anything else. Variable names are "
"declared like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "var <replaceable>variableName</replaceable>;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Variables can also be declared in lists, like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"var <replaceable>variableName</replaceable>, <replaceable>variableOtherName</"
"replaceable>;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Variables can be assigned a value at any time after they have been declared. "
"Any single object can be assigned to a variable. If a variable is already "
"assigned a value, any subsequent assignment will erase the previous "
"assignment; the previously-assigned value will is not retrievable."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The first assignment to a variable is said to \"initialize\" the variable. "
"Initialization is a special kind of assignment, because a variable cannot be "
"used before it is initialized. If a program attempts to use an un-"
"initialized variable, the <application>SuperCollider</application> "
"interpreter will cause an error. For this reason, you should always "
"initialize a variable when you declare it. There is a special way to do this:"
""
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "var <replaceable>variableName</replaceable> = nil;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Since you can't always assign a useful value, you can pick an arbitrary one. "
"Assigning \"nil\" is common practice, because it means \"nothing,\" but "
"without actually being nothing (this avoids <emphasis>some</emphasis> "
"errors). Assigning zero is another possibility; it is standard practice in "
"many programming languages, and will avoid most errors, even if the variable "
"is eventually supposed to hold another kind of object. Intialization and "
"declaration of multiple variables can also be done as a list:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"var <replaceable>variableName</replaceable> = 0, "
"<replaceable>variableOtherName</replaceable> = 0;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Single-letter variable names have a special purpose in "
"<application>SuperCollider</application>. They are already declared, so you "
"don't have to declare them. They are also already initialized to \"nil\", so "
"you don't have to do that either. These variable names are intended to be "
"used as a quick fix, while you're experimenting with how to make a program "
"work. You should not use them in good-quality programs."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The single-letter variable \"s\" is automatically assigned to the server on "
"the computer running the interpreter. You should avoid re-assigning that "
"variable."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Variable names must always begin with a lower-case letter."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Use variables to write programs that do the following tasks:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Perform arithmetic with an uninitialized variable. An error should appear "
"when the program is executed."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Calculate the value of <literal>y</literal>, if all other values are known, "
"for the quadratic equation: <code>y = a * x * x + b * x + c</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Re-write the Hello World Program so that it will say \"Hello\" to a name "
"stored in a variable. Remember that you can use the interpreter to "
"automatically output the last line of a function."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Functions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A Function is a statement, or a series of statements, that we want to use "
"many times. When a Function is assigned to a variable, you can execute the "
"Function as many times as you wish. Any statements that happen between "
"braces { like this; } are treated as a Function. Functions are executed by "
"passing them the \"value\" message, as in the following example."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here is a Function that is not assigned to a variable, and is executed once."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ \"Hello, World!\".postln; }.value;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Notice that there are two semicolons: one after the statement within the "
"Function, and one after the \"value\" message that tells the Function to "
"execute."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here is a Function with identical function, assigned to a variable, and "
"executed twice."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"var myFunction = { \"Hello, World!\".postln; }; // note two semicolons\n"
"myFunction.value;\n"
"myFunction.value;\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Function Arguments"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The most useful aspect of Functions is that they can produce varying "
"results, depending on their input. For whatever reason, the input accepted "
"by a Function is called an \"argument.\" <application>SuperCollider</"
"application>'s Functions can accept any number of arguments - zero, one, or "
"many. Argument values (called \"parameters\") are provided to a Function by "
"adding them in parentheses after the name of the Function, separated with "
"commas, like this: <code>exampleFunction( 5, 7, 9 );</code> Argument "
"variables are declared as the first statement in a Function, like this: "
"<code>arg <replaceable>oneNumber</replaceable>, <replaceable>twoNumber</"
"replaceable>;</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This program is significantly more complicated than previous examples, but "
"it shows how useful Functions can be. Notice how the braces in that example "
"are on different lines than the rest of the Function, which gives us more "
"space within the Function to complete some useful work."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var greeter =\n"
"   {\n"
"      arg name;\n"
"      ( \"Hello\" + name ).postln;\n"
"   };\n"
"\n"
"   greeter.value( \"Samantha\" );\n"
"   greeter.value( \"Jermain\" );\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is how the program works:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A variable named <literal>greeter</literal> is declared, and assigned a "
"Function."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The Function contains an argument called <literal>name</literal>, and "
"outputs \"Hello\" plus the name given to it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The parentheses here <code>( \"Hello\" + name )</code> ensure that the two "
"strings are added together <emphasis>before</emphasis> the <function>postln</"
"function> message prints them out."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>greeter</literal> variable is used to call the Function with "
"two different names."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <code>nil;</code> statement is optional, and does not affect the "
"operation of the program. What it does is return a \"nothing\" value to the "
"interpreter after program execution completes, so that the last message is "
"not repeated."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Since every argument has a name, <application>SuperCollider</application> "
"allows you to use that name when executing the function. This example "
"executes the <function>greeter</function> function from the last example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "greeter.value( name:\"Myung-Whun\" );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is more useful if there are many arguments, and you do not remember the "
"order that they appear in the Function's definition."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<application>SuperCollider</application> also allows you to specify default "
"values for arguments, so that they do not need to be specified. This allows "
"optional customization of a Function's behaviour, and is therefore very "
"powerful."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example modifies the one above by adding default-value arguments, and "
"by calling arguments with their name. As you can see, I've been tricking you "
"a bit: <function>postln</function> is actually a Function, but a special "
"kind, explained later."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var greeter =\n"
"   {\n"
"      arg name, greeting = \"Hello\";\n"
"      postln( greeting + name );\n"
"   };\n"
"\n"
"   greeter.value( \"Samantha\" );\n"
"   greeter.value( \"Jermain\", \"Goodbye\" );\n"
"   greeter.value( name:\"Myung-Whun\" );\n"
"   greeter.value( greeting:\"Bienvenue\", name:\"Marcel\" );\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Any value can be used as a parameter, as long as the Function expects it. In "
"fact, even Functions can be used as parameters for Functions!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Function Return Values"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"All <application>SuperCollider</application> Functions return a value to the "
"interpreter when they have finished execution. As with programs, the value "
"returned is the value of the last statement in the Function. The return "
"value of a Function can be captured, assigned to a variable, and used again "
"later."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This example assigns the result of a Function to a variable."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var mysticalMath =\n"
"   {\n"
"      arg input = 0;\n"
"      input * 23;\n"
"   };\n"
"   var someNumber = 9;\n"
"\n"
"   someNumber = mysticalMath.value( someNumber );\n"
"   someNumber.postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A Function and variable are created, and assigned values."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This line <code>someNumber = mysticalMath.value( someNumber );</code> "
"executes the <function>mysticalMath</function> function, which multiplies "
"its argument by <literal>23</literal> and returns the value. Then, it "
"assigns the return value of the Function to <literal>someNumber</literal>. "
"In any statement that contains an assignment, the assignment is always done "
"last. In other words, the Function in this example will <emphasis>always</"
"emphasis> be given an argument of <literal>9</literal>, and only "
"<emphasis>after</emphasis> the Function completes execution and returns a "
"value will that value be assigned to <function>someNumber</function>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The new value of <literal>someNumber</literal> is displayed."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The program could have been shortened like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var mysticalMath =\n"
"   {\n"
"      arg input = 0;\n"
"      input * 23;\n"
"   };\n"
"\n"
"   var someNumber = mysticalMath.value( 9 );\n"
"   someNumber.postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "It could have been shortened even more like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var mysticalMath =\n"
"   {\n"
"      arg input = 0;\n"
"      input * 23;\n"
"   };\n"
"\n"
"   mysticalMath.value( 9 ).postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Experiment with the shortened versions of the program, ensuring that you "
"know why they work."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Variable Scope"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A variable is only valid within its \"scope.\" A variable's scope is "
"determined by where it is declared. It will always last between either "
"<literal>(</literal> and <literal>)</literal> or <literal>{</literal> and "
"<literal>}</literal>, and applies to all statements within that block of "
"code. Variable names can be re-declared in some contexts, which can be "
"confusing."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Consider the scope of the variables in this example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var zero = 0;\n"
"   var function =\n"
"   {\n"
"      var zero = 8;\n"
"      var sixteen = 16;\n"
"      zero.postln; // always prints 8\n"
"   };\n"
"\n"
"   function.value;\n"
"   zero.postln; // always prints 0\n"
"   sixteen.postln; // always causes an error\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Because <literal>function</literal> declares its own copy of <literal>zero</"
"literal>, it is modified independently of the variable <literal>zero</"
"literal> declared before the Function. Every time <literal>function</"
"literal> is executed, it re-declares its own <literal>zero</literal>, and "
"the interpreter keeps it separate from any other variables with the same "
"name. When <literal>function</literal> has finished executing, the "
"interpreter destroys its variables. Variables declared inside any Function "
"are only ever accessible from within that Function. This is why, when we try "
"to execute <code>sixteen.postln;</code>, the interpreter encounters an error:"
" <literal>sixteen</literal> exists only within <literal>function</literal>, "
"and is not accessible outside the function. By the way, in order to excute "
"this example, you will need to remove the error-causing reference to "
"<literal>sixteen</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now consider the scope of the variables in this example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var zero = 0;\n"
"   var function =\n"
"   {\n"
"      var sixteen = 16;\n"
"      zero = 8;\n"
"      zero.postln; // always prints 8\n"
"      sixteen.postln;\n"
"   };\n"
"\n"
"   function.value;\n"
"   zero.postln; // always prints 8\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Why does the last line always print <literal>8</literal>? It's because "
"<literal>zero</literal> was set to <literal>8</literal> within "
"<literal>function</literal>. More importantly, <literal>function</literal> "
"did not declare its own copy of <literal>zero</literal>, so it simply "
"accesses the one declared in the next \"highest\" block of code, which "
"exists between <literal>(</literal> and <literal>)</literal> in this example."
""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is why it is important to pay attention to a variable's scope, and to "
"make sure that you declare your variables in the right place. Unexpected and "
"difficult-to-find programming mistakes can occur when you forget to declare "
"a variable, but it is declared elsewhere in your program: you will be "
"allowed to use the variable, but it will be modified unexpectedly. On the "
"other hand, it can be greatly advantageous to be able to access variables "
"declared \"outside the local scope\" (meaning variables that are not "
"declared in the same code block in which they are used), but careful thought "
"and planning is required."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Astute readers will notice that it is possible to re-declare the single-"
"letter variable names, allowing you to control their scope. Consider the "
"following program:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var a = 0;\n"
"   b =\n"
"   {\n"
"      var c = 16;\n"
"      a = 8;\n"
"      a.postln;\n"
"      c.postln;\n"
"   };\n"
"\n"
"   b.value;\n"
"   a.postln;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example requires careful examination. What is the scope of <literal>a</"
"literal>, <literal>b</literal>, and <literal>c</literal>? The answers may be "
"surprising."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<literal>a</literal> is declared just after the <literal>(</literal> "
"character, so the interpreter destroys it upon reaching the <literal>)</"
"literal> character."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<literal>c</literal> is declared just after the <literal>{</literal> "
"character, so the interpreter destroys it upon reaching the <literal>}</"
"literal> character."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<literal>b</literal> is <emphasis>not</emphasis> declared in this program, "
"so it refers to the automatically-declared variable with that name. The "
"interpreter does not destroy it until it is restarted or stopped. This means "
"that the Function assigned to <literal>b</literal> is still available "
"<emphasis>after</emphasis> the program finishes execution. Try it! Execute "
"the program above, and then execute this single-line program alone: <code>b."
"value;</code>"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Object-Oriented <application>SuperCollider</application>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<application>SuperCollider</application> is difficult to describe precisely, "
"because its syntax allows great flexibility. There are many different ways "
"to accomplish the same task. Each one is subtly different, and gives you a "
"different set of possibilities, but there is often no \"best solution.\" One "
"of the advantages to this is that it easily allows three \"programming "
"paradigms,\" although one is used much more often than the others."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Imperative Programming"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Imperative programming is easy to understand: it is simply a list of "
"commands, like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var a, b, c;\n"
"\n"
"   a = 12;\n"
"   b = 25;\n"
"   c = a + b;\n"
"   a.postln;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Declare the variables, set the variables, do a calculation, and print the "
"result of the calculation. This is a simple example, and a simple model, but "
"it is very difficult to escape completely. After all, humans think of large "
"problems in terms of algorithms (the instructions needed to do something). "
"Computers solve large problems, so being able to program them with a series "
"of instructions makes sense."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Functional Programming"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Functional programming is also easy to understand, but it can be a little "
"bit more difficult to think about complex tasks. Functional programs use "
"Functions to complete all of their work. This is not strictly possible in "
"<application>SuperCollider</application>: it is more imperative than "
"functional, but the creative use of Functions can easily solve some problems "
"that are difficult to write with an imperative approach."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following example is an extension of the \"Imperative\" example. Pretend "
"that the following Functions exist, and do the following tasks:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "getinput : allows the user to enter a number, and returns that number"
msgstr ""

#. Tag: para
#, no-c-format
msgid "add : adds together the numbers given as arguments, returning the sum"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"(\n"
"   postln( add( getinput, getinput ) );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<application>SuperCollider</application> will always execute the inner-most "
"Functions first. This is how the interpreter executes the single-line "
"program above:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Execute the left call of <function>getinput</function>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Execute the right call of <function>getinput</function>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Execute <function>add</function> with the two numbers returned by "
"<function>getinput</function>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Execute <function>postln</function> with the number returned by "
"<function>add</function>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Both imperative and functional programming have advantages and disadvantages."
" <application>SuperCollider</application> will allow you to use either "
"approach, or a mix of both, when solving problems."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Object-Oriented Programming"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Object-oriented programming is more difficult to think about than imperative "
"or functional. When using this paradigm (mode of thought), almost everything "
"in <application>SuperCollider</application> is thought of as an abstract "
"Object. In this way, it allows programmers to make compelling comparisons to "
"the real world, where all tangible things are objects, and where it is not "
"hard to conceive of most intangible things as objects, too. With object-"
"oriented programming, computer science takes a break from mathematics, and "
"is influenced by philosophy."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Class names always begin with an uppercase letter."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Anything can be represented as an Object - like a bicycle, for instance. "
"Let's pretend that we have an Object called a Bicycle. We don't yet have a "
"particular bicycle - just the abstract <firstterm>class</firstterm> "
"containing everything that is true about all bicycles. If a Bicycle class "
"exists in <application>SuperCollider</application>, you generate a specific "
"instance like this: <code>var bike = Bicycle.new;</code> All "
"<application>SuperCollider</application> Objects can be "
"<firstterm>instantiated</firstterm> in this way: you get a specific Bicycle "
"from the generic class, and you can then modify and work with your own "
"Object as you choose. The specific properties associated with a particular "
"instance of a class are called <firstterm>instance variables</firstterm>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are certain things that Bicycles are designed to do: turn the wheels, "
"turn the handlebar, raise and lower the seat, and so on. You can cause these "
"things to happen by providing a certain input to a real-world Bicycle: if "
"you want to turn the wheels, you might push the pedals. In "
"<application>SuperCollider</application>, you cause things to happen by "
"<firstterm>sending a message</firstterm> to the Object that tells it what "
"you want: if you have a Bicycle, you might turn the wheels like this: "
"<code>bike.turnTheWheels;</code> When you do this, you actually execute the "
"<function>turnTheWheels</function> function, which is defined by the "
"abstract Bicycle class. Because it doesn't make sense to turn the wheels of "
"all bicycles in existence, you don't call the <firstterm>method</firstterm> "
"(a synonym for \"Function\") from the Bicycle class itself, but from the "
"particular instance whose wheels you want to turn. The proper way to access "
"instance variables is by using instance methods."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If this kind of programming is new to you, it might seem extremely difficult."
" It can be intimidating at first, but it is actually not too difficult to "
"understand once you start to use it. In fact, you have already been using "
"it! Remember the <function>postln</function> command that was described "
"earlier as a special kind of Function? It's actually a Function defined by "
"<application>SuperCollider</application>'s abstract class <classname>Object</"
"classname>, which defines a set of messages that can be passed to "
"<emphasis>any</emphasis> <application>SuperCollider</application> object. "
"Because most things in <application>SuperCollider</application> are objects, "
"we can send them the <function>postln</function> message, and they will "
"understand that it means to print themselves in the "
"\"<application>SuperCollider</application> output\" pane."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Why is it that all Objects respond to the <function>postln</function> "
"message? <application>SuperCollider</application> classes are allowed to "
"belong to other <application>SuperCollider</application> classes, of which "
"they are a part. Consider the Bicycle class again. It is a kind of vehicle, "
"and philosophers might say that \"things that are members of the bicycle "
"class are also members of the vehicle class.\" That is, real-world bicycles "
"share certain characteristics with other real-world objects that are "
"classified as \"vehicles.\" The bicycle class is a \"sub-class\" of the "
"vehicle class, and it <firstterm>inherits</firstterm> certain properties "
"from the vehicles class. <application>SuperCollider</application> allows "
"this behaviour too, and calls it <firstterm>inheritance</firstterm>. In "
"<application>SuperCollider</application>, since all classes define Objects, "
"they are all automatically considered to be a sub-class of the class called "
"<classname>Object</classname>. All classes therefore inherit certain "
"characteristics from the <classname>Object</classname> class, like knowing "
"how to respond to the <function>postln</function> message."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"equivalent notation: <literal>5.postln</literal> versus <literal>postln( 5 "
")</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"You still don't know how to write new Classes and Objects in "
"<application>SuperCollider</application>, but knowing how to use them is "
"more than enough for now. By the time you need to write your own Classes, "
"you will probably prefer to use the official <application>SuperCollider</"
"application> help files, anyway."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Choosing a Paradigm"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"At this point you may begin worrying about which programming paradigm you "
"should choose, and when. The answer is unhelpful: \"Whichever seems best for "
"the task.\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Let's expand on this. If you are primarily a programmer, then you probably "
"already know how to choose the best paradigm and algorithm for the task. If "
"you are a musician, then you probably just want your program to produce the "
"output that you want (in this case, a particular set of sounds). Part of the "
"beauty of <application>SuperCollider</application>'s flexibility is that it "
"allows you to produce the same output in different ways. As a musician this "
"means that, as long as your program works as you want it to work, it doesn't "
"matter how you write it. Experience will teach you more and less effective "
"ways of doing things, but there is no need for rules."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Even so, here are some guidelines that will help you to start thinking about "
"music programs:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Programs of all sorts often follow a simple, four-step flow. Not all parts "
"are always present."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Declare variables."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Get input from the user."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Calculate something with the input."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Provide output to the user (i.e. \"make noise\")."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Repetition is the enemy of correctness, so if you're going to execute some "
"code more than once, try writing a Function. If it's slightly different "
"every time, try using arguments. Arguments with default values are a great "
"way to expand a Function's usefulness."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If it looks too complicated, then it probably is. The more difficult it is "
"to understand something, the greater the chance of making a mistake."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Don't forget the semicolons at the end of every statement."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Sound-Making Functions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"It's finally time to start thinking about Functions that produce sound!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example is discussed below in the following sections. Remember, when "
"running <application>SuperCollider</application> code in <application>GEdit</"
"application>, you can stop the sound by pressing <keycombo><keycap>Esc</"
"keycap></keycombo>"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ SinOsc.ar( 440, 0, 0.2 ); }.play;"
msgstr ""

#. Tag: title
#, no-c-format
msgid "UGens"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"\"UGen\" stands for \"unit generator.\" UGens are special Objects that "
"generate either an audio or a control signal."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The UGen that will be used for most of the experimentation in this Guide, "
"and which was primarily used to generate the \"Method One\" program that "
"goes with this Guide, is called <classname>SinOsc</classname>, which "
"generates a sine wave. The class' name, <classname>SinOsc</classname> means "
"\"sine oscillator.\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The example at the beginning of this chapter, <code>SinOsc.ar( 440, 0, 0.2 "
");</code> produces an \"instance\" of the <classname>SinOsc</classname> "
"class, which continuously outputs a signal, based on the parameters given in "
"parentheses. This instance produces an \"audio rate\" signal, which means "
"that it is of sufficient quality to eventually become sound."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A slightly modified version of that code will give us a \"control rate\" "
"signal: <code>SinOsc.kr( 440, 0, 0.2 );</code> There is only one small "
"difference between the two examples - for us - but for "
"<application>SuperCollider</application>, the difference is huge. A control "
"rate signal will not be of sufficient quality to become sound; it is used to "
"control other UGens that do become sound."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Unlike other Classes, UGen Classes should not be instantiated with the "
"<function>new</function> message. They should always be instantiated as "
"either audio-rate (by passing the <function>ar</function> message), or "
"control-rate (by passing the <function>kr</function> message). Control-rate "
"signals are calculated much less often than audio-rate signals, which allows "
"the <application>SuperCollider</application> interpreter and server to save "
"processing power where it wouldn't be noticed."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The \"play\" Function"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <function>play</function> function does exactly what it says: it plays "
"its input. The input must be a function with an audio-rate signal generator "
"as the return value."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following two examples produce the same output:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "play( { SinOsc.ar( 440, 0, 0.2 ); } );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The first example is written from an object-oriented perspective. Functions "
"know how to play their return value, when passed the <function>play</"
"function> message. This is true of all Functions whose return value is an "
"audio-rate UGen. The second example is written from a functional perspective."
" The Function called <function>play</function> will play its input, which "
"must be a Function whose return value is an audio-rate UGen. Whether you "
"should write <function>play</function> in the functional or object-oriented "
"way depends on which makes more sense to you."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Try to re-write the above example so that the <function>play</function> "
"function operates on a variable-defined Function."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The arguments to <classname>SinOsc</classname>, whether the audio- or "
"control-rate generator, are these:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The first is called <literal>freq</literal>; it sets the frequency."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The second is called <literal>add</literal>; it is added to all values "
"produced by the UGen."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The third is called <literal>mul</literal>; all values produced by the UGen "
"are multiplied by this."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"You now know enough to spend hours with the sine oscillator UGen. Try "
"combining audio- and control-rate UGens, and try to figure out what happens "
"when each of the arguments is adjusted. Be careful that your audio "
"interface's volume isn't set too high! Experiment with this one:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myFrequency =  SinOsc.kr( freq:1, mul:200, add:400 );\n"
"   var sound = { SinOsc.ar( myFrequency, 0, 0.2 ); };\n"
"\n"
"   play( sound );\n"
")\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multichannel Audio"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"By now you must be growing tired of the left-side-only sounds being produced "
"by the examples."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Stereo Array"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The easiest way to output multichannel audio in <application>SuperCollider</"
"application> is to use a kind of \"Collection\" (defined later) called an "
"\"Array.\" <application>SuperCollider</application> will theoretically "
"handle any number of audio output channels, but by default is usually only "
"configured for two-channel stereo audio. Since humans have only two ears, "
"this is sufficient for most tasks! A multichannel array is notated like this:"
" <code>[ LeftChannel.ar( x ), RightChannel.ar( y ) ]</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is our simple sine oscillator expanded to produce stereo audio:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ [ SinOsc.ar( 440, 0, 0.2 ), SinOsc.ar( 440, 0, 0.2 ) ]; }.play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Not much has changed, except that the audio we hear is now being emitted "
"from both the left and right channels. Change the frequency of one of the "
"sine oscillators to <literal>450</literal> and the difference will become "
"much more apparent."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Multichannel arrays can also be combined with each other, like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   var one = [ x, y, z ];\n"
"   var two = [ a, b, c ];\n"
"   [ one, two ];\n"
"}\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If <literal>a</literal>, <literal>b</literal>, <literal>c</literal>, "
"<literal>x</literal>, <literal>y</literal>, and <literal>z</literal> were "
"all audio-rate UGens, this function could be <function>play</function>'ed. "
"It would produce stereo audio, and each channel would have three independent "
"UGens."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multichannel Expansion"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"You can automatically create multiple UGens by providing an Array as one of "
"the parameters. The <application>SuperCollider</application> interpreter "
"will automatically create multichannel UGens as a result."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following two examples produce equivalent output:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ SinOsc.ar( [440, 440], 0, 0.2 ); }.play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The second example can be easier to read, because it is obvious that only "
"the frequency is changing - or in this case, that nothing is changing. This "
"technique is more useful in a situation like the following:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{ SinOsc.ar( [[440, 445, 450, 455, 460, 465],\n"
"              [440, 445, 450, 455, 460, 465]],\n"
"             0,\n"
"             0.2 ); }.play;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"That's not exactly easy to read, but it's easier to figure out than the most "
"obvious alternative:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   [[ SinOsc.ar( 440, 0, 0.2 ), SinOsc.ar( 445, 0, 0.2 ), SinOsc.ar( 450, 0, "
"0.2 ), SinOsc.ar( 455, 0, 0.2 ), SinOsc.ar( 460, 0, 0.2 ), SinOsc.ar( 465, "
"0, 0.2 ) ],\n"
"    [ SinOsc.ar( 440, 0, 0.2 ), SinOsc.ar( 445, 0, 0.2 ), SinOsc.ar( 450, 0, "
"0.2 ), SinOsc.ar( 455, 0, 0.2 ), SinOsc.ar( 460, 0, 0.2 ), SinOsc.ar( 465, "
"0, 0.2 ) ]];\n"
"}.play;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"More importantly, multichannel expansion gives us another tool to avoid "
"repetition. Repetition is the enemy of correctness - it's so much more "
"difficult to find a mistake in the second example than in the first!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Method One"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Believe it or not, you now know enough to understand a slightly-modified "
"version of the first part of \"Method One,\" a <application>SuperCollider</"
"application> program written and heavily commented specifically for use with "
"this guide. You should <function>play</function> this example, and "
"experiment with changing the frequencies, volumes, and so on. The fully-"
"commented version provides a full explanation of how the function works."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   // sets up the frequencies of both channels\n"
"   var frequencyL = SinOsc.kr( freq:10, mul:200, add:400 ); // oscillating\n"
"   var frequencyR = SinOsc.kr( freq:1, mul:50, add:150 ); // oscillating\n"
"   var frequencyL_drone = SinOsc.kr( freq:0.03, mul:20, add:100 ); // drone\n"
"   var frequencyR_drone = SinOsc.kr( freq:0.01, mul:20, add:210 ); // drone\n"
"\n"
"   // changes the volume of the oscillating part in the left channel\n"
"   var volumeL = SinOsc.kr( freq:0.5, mul:0.02, add:0.03 );\n"
"\n"
"   // left channel\n"
"   var left = [ SinOsc.ar( freq:frequencyL, mul:volumeL ), // this is the "
"oscillating part\n"
"                SinOsc.ar( freq:[frequencyL_drone,2*frequencyL_drone], mul:0."
"02 ), // the rest make up the drone\n"
"                SinOsc.ar( freq:[5*frequencyL_drone,7*frequencyL_drone], mul:"
"0.005 ),\n"
"                SinOsc.ar( freq:[13*frequencyL_drone,28*frequencyL_drone], "
"mul:0.001 ) ];\n"
"\n"
"   // right channel\n"
"   var right = [ SinOsc.ar( freq:frequencyR, mul:0.1 ), // this is the "
"oscillating part\n"
"                 SinOsc.ar( freq:[frequencyR_drone,2*frequencyR_drone], mul:"
"0.02 ), // the rest make up the drone\n"
"                 SinOsc.ar( freq:4*frequencyR_drone, mul:0.005 ),\n"
"                 SinOsc.ar( freq:[64*frequencyR_drone,128*frequencyR_drone], "
"mul:0.01 ) ]; // high frequencies!\n"
"\n"
"   [ left, right ];\n"
"}\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Collections"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A \"collection\" is just that - a collection of Objects. Collections are "
"simply a means of organizing a large amount of data, without having to "
"assign a variable name for each portion of data. Compared to other "
"programming languages, <application>SuperCollider</application> provides a "
"relatively large number of Collections in the standard library."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"We have already seen an example of a Collection as multichannel audio arrays."
" An Array is a kind of Collection - in object-oriented terminology, the "
"Array Class is a <firstterm>sub-class</firstterm> of the Collection Class, "
"and inherits its behaviours. Conversely, the Collection Class is the "
"<firstterm>super-class</firstterm> of the Array Class. The Collection Class "
"itself is not to be used; it is designed to provide common features so that "
"it is easier to write Classes for collections."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As with all the chapters from this point on, it is not necessary to read "
"this in sequence. If you prefer, you can skip it and return later when you "
"need to manage a large set of data."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Array"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Arrays have been traditionally been very popular with programmers. In "
"<application>SuperCollider</application>, they are capable of storing a "
"large number of Objects, and they provide advanced behaviours that are "
"normally not associated with Arrays. They are not as indespensible as they "
"used to be. Most programming languages now provide (or can easily be "
"extended to add) Lists, Trees, and other kinds of data storage structures, "
"which offer more capabilities, and are easier to use and to think about. "
"Users new to programming might find the various kinds of Lists to be more "
"helpful."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Building an Array"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An Array is a Collection with a finite maximum size, determined at "
"declaration time. It is the programmer's responsibility to maintain a "
"meaningful order, and to remember the meaning of the data. Data in an Array "
"is called \"elements,\" each of which is assigned a specific \"index number."
"\" Index numbers begin at 0. Any mix of Objects can be stored in an Array, "
"including an Array."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example declares an Array, adds some elements, then prints them out."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tA = Array.new( 2 ); // \"tA\" stands for \"testArray\"\n"
"\n"
"   tA = tA.add( 5 );\n"
"   tA = tA.add( 3 );\n"
"   tA = tA.add( 17 );\n"
"\n"
"   tA.postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Notice that Array is a Class, and it must be instantiated before use. Here, "
"the variable <literal>tA</literal> is assigned an Array with enough space "
"for two objects. Notice that the elements are printed out in the order that "
"you add them to the Array. They are not sorted or shuffled (unless you send "
"a message like <function>scramble</function>). But why did I write <code>tA ="
" tA.add( 17 );</code> instead of <code>tA.add( 17 );</code>? Shouldn't the "
"second method be sufficient for adding an Object to an Array, thereby making "
"the re-assignment unnecessary? It does, but let's see what happens when we "
"take it away:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tA = Array.new( 2 ); // \"tA\" stands for \"testArray\"\n"
"\n"
"   tA.add( 5 );\n"
"   tA.add( 3 );\n"
"   tA.add( 17 );\n"
"\n"
"   tA.postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>17</literal> is missing - it doesn't get added into the Array! "
"This is because the Array was only declared with two slots, and you can't "
"add three Objects into two slots. So why did this work the first time? "
"<application>SuperCollider</application> was programmed to help us fit "
"additional items into an Array. If an Array has reached its capacity, "
"<application>SuperCollider</application> will automatically make a new, "
"larger Array for us, and returns that from the <function>add</function> "
"method. Therefore, any time you add an element to an Array, you should "
"always re-assign the result, so that you don't have to worry about whether "
"you exceeded the Array's capacity."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Accessing an Array's Elements"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are two ways to access individual elements within an Array. One way is "
"object-oriented, and one way is more traditional, inspired by programming "
"languages such as the wildly popular \"C\" language. The object-oriented "
"style uses the <function>at</function> and <function>put</function> methods. "
"The traditional style uses square brackets with an index number."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following examples produce equivalent output. The first uses the object-"
"oriented style, and the second uses the traditional style."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tA = Array.new( 3 );\n"
"\n"
"   tA = tA.add( 5 );\n"
"   tA = tA.add( 3 );\n"
"   tA = tA.add( 17 );\n"
"\n"
"   tA.at( 0 ).postln; // outputs 5\n"
"   tA.at( 1 ).postln; // outputs 3\n"
"   tA.at( 2 ).postln; // outputs 17\n"
"\n"
"   tA.put( 0, 24 ); // assigns 24 to element 0\n"
"\n"
"   tA.at( 0 ).postln; // outputs 24\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tA = Array.new( 3 );\n"
"\n"
"   tA = tA.add( 5 );\n"
"   tA = tA.add( 3 );\n"
"   tA = tA.add( 17 );\n"
"\n"
"   tA[0].postln; // outputs 5\n"
"   tA[1].postln; // outputs 3\n"
"   tA[2].postln; // outputs 17\n"
"\n"
"   tA[0] = 24 ; // assigns 24 to element 0\n"
"\n"
"   tA[0].postln; // outputs 24\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Different people prefer different styles of accessing Arrays."
msgstr ""

#. Tag: title
#, no-c-format
msgid "List"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"An List is a Collection with an infinite maximum size. It is the "
"programmer's responsibility to maintain a meaningful order, and to remember "
"the meaning of the data. Data in a List is called \"elements,\" each of "
"which is assigned a specific \"index number.\" Index numbers begin at 0. Any "
"mix of Objects can be stored in a List, including a List. Lists and Arrays "
"are very similar, but <application>SuperCollider</application> manages some "
"of the dirty work for you, when you use the List Class."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Building a List"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are four methods which instantiate a List. These are all \"Class "
"methods,\" meaning they do not operate on a specific List, but can be used "
"to make any List."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>List.new</function> creates a List. You can also specify the "
"initial number of elements as an argument, if you choose."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>List.newClear( <replaceable>x</replaceable> )</function> creates a "
"List with <literal>x</literal> number of slots, filled with <literal>nil</"
"literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>List.copyInstance( <replaceable>aList</replaceable> )</function> "
"creates a List which is a copy of <literal>aList</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>List.newUsing( <replaceable>anArray</replaceable> )</function> "
"creates a List with the same elements as <literal>anArray</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Adding to an Existing List"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"These are \"instance methods,\" meaning that they operate on a specific list."
""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>put( <replaceable>index</replaceable>, <replaceable>item</"
"replaceable> )</function> adds <literal>item</literal> into the List at "
"index number <literal>index</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>add( <replaceable>item</replaceable> )</function> adds "
"<literal>item</literal> to the end of a List."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>addFirst( <replaceable>item</replaceable> )</function> adds "
"<literal>item</literal> to the beginning of a List."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Accessing a List"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>at( <replaceable>index</replaceable> )</function> returns the "
"Object assigned to the <literal>index</literal> index number. If "
"<literal>index</literal> is greater than the last element in the List, "
"returns <literal>nil</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>clipAt( <replaceable>index</replaceable> )</function> returns the "
"Object assigned to the <literal>index</literal> index number. If "
"<literal>index</literal> is greater than the last element in the List, "
"returns the last element in the List."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>wrapAt( <replaceable>index</replaceable> )</function> returns the "
"Object assigned to the <literal>index</literal> index number. If "
"<literal>index</literal> is greater than the last element in the List, "
"returns an element based on a \"wrap-around\" index number. For a three-"
"element List, <literal>0</literal> will return element <literal>0</literal>, "
"<literal>1</literal> returns <literal>1</literal>, <literal>2</literal> "
"returns <literal>2</literal>, <literal>3</literal> returns <literal>0</"
"literal>, <literal>4</literal> returns <literal>1</literal>, <literal>5</"
"literal> returns <literal>2</literal>, <literal>6</literal> returns "
"<literal>0</literal>, and so on."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>foldAt( <replaceable>index</replaceable> )</function> returns the "
"Object assigned to the <literal>index</literal> index number. If "
"<literal>index</literal> is greater than the last element in the List, "
"returns an element based on a \"fold-back\" index number. Whereas "
"<function>wrapAt()</function> always continues from the lowest to the "
"highest index number, <function>foldAt()</function> changes every time: low "
"to high, high to low, low to high, and so on."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Removing from a List"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"One way to remove an element from a List is to re-assign that element's "
"index number the value <literal>nil</literal>. These two Functions also "
"remove elements from a List. They are \"instance methods,\" meaning that "
"they operate on a specific list."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>pop</function> returns the last element in a List, and removes it "
"from the List."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>removeAt( <replaceable>index</replaceable> )</function> removes "
"the element assigned to <literal>index</literal> index number, removing it "
"from the List and shrinking the List. <function>removeAt()</function> does "
"not leave a <literal>nil</literal> element in the List."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Examples"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following examples show different ways to use List's."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL.add( 42 );\n"
"   tL.add( 820 );\n"
"\n"
"   postln( tL.pop ); // outputs 820\n"
"\n"
"   tL.add( 7 );\n"
"   tL.add( 19 );\n"
"   tL.add( 23 );\n"
"\n"
"   postln( tL.pop ); // outputs 23\n"
"   postln( tL.pop ); // outputs 19\n"
"   postln( tL.pop ); // outputs 7\n"
"   postln( tL.pop ); // outputs 42\n"
"\n"
"   postln( tL.pop ); // List is empty, so we get \"nil\"\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This code adds numbers to the end of a List, then removes them from the end "
"of the List."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL.addFirst( 42 );\n"
"   tL.addFirst( 820 );\n"
"\n"
"   postln( tL.pop ); // outputs 42\n"
"\n"
"   tL.addFirst( 7 );\n"
"   tL.addFirst ( 19 );\n"
"   tL.addFirst ( 23 );\n"
"\n"
"   postln( tL.pop ); // outputs 820\n"
"   postln( tL.pop ); // outputs 7\n"
"   postln( tL.pop ); // outputs 19\n"
"   postln( tL.pop ); // outputs 23\n"
"\n"
"   postln( tL.pop ); // list is empty, so we get \"nil\"\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This modification of the first example adds numbers to the beginning of a "
"List, then removes them from the end of the List. This is one way to ensure "
"that the List elements are removed in the same order that they are added."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL.add( 42 );\n"
"   tL.add( 820 );\n"
"\n"
"   postln( tL.removeAt( 0 ) ); // outputs 42\n"
"\n"
"   tL.add( 7 );\n"
"   tL.add( 19 );\n"
"   tL.add( 23 );\n"
"\n"
"   postln( tL.removeAt( 0 ) ); // outputs 820\n"
"   postln( tL.removeAt( 0 ) ); // outputs 7\n"
"   postln( tL.removeAt( 0 ) ); // outputs 19\n"
"   postln( tL.removeAt( 0 ) ); // outputs 23\n"
"\n"
"//   postln( tL.removeAt( 0 ) ); // causes an error!\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This modification of the first example adds numbers to the end of a List, "
"then removes from the beginning of the List. This is another way to ensure "
"that the List elements are removed in the same order that they're added. "
"Note that, when the List is empty, using the \"removeAt()\" Function causes "
"an error, because you try to access a List index which doesn't exist."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL = [42,820,7,19,23];\n"
"\n"
"   tL.at( 0 ).postln; // outputs 42\n"
"   tL.at( 1 ).postln; // outputs 820\n"
"   tL.at( 2 ).postln; // outputs 7\n"
"   tL.at( 3 ).postln; // outputs 19\n"
"   tL.at( 4 ).postln; // outputs 23\n"
"   tL.at( 5 ).postln; // outputs nil\n"
"   tL.at( 6 ).postln; // outputs nil\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example shows another way to add elements to an empty List, which also "
"works for Arrays. Then it shows what happens when you try to access elements "
"beyond the end of a List with the \"at()\"Function."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL = [42,820,7,19,23];\n"
"\n"
"   tL.clipAt( 0 ).postln; // outputs 42\n"
"   tL.clipAt( 1 ).postln; // outputs 820\n"
"   tL.clipAt( 2 ).postln; // outputs 7\n"
"   tL.clipAt( 3 ).postln; // outputs 19\n"
"   tL.clipAt( 4 ).postln; // outputs 23\n"
"   tL.clipAt( 5 ).postln; // outputs 23\n"
"   tL.clipAt( 6 ).postln; // outputs 23\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example shows what happens when you try to access elements beyond the "
"end of a List with the \"clipAt()\" Function. For index numbers beyond the "
"end of the List, the interpreter will simply return the last element."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL = [42,820,7,19,23];\n"
"\n"
"   tL.foldAt( 0 ).postln; // outputs 42\n"
"   tL.foldAt( 1 ).postln; // outputs 820\n"
"   tL.foldAt( 2 ).postln; // outputs 7\n"
"   tL.foldAt( 3 ).postln; // outputs 19\n"
"   tL.foldAt( 4 ).postln; // outputs 23\n"
"   tL.foldAt( 5 ).postln; // outputs 19\n"
"   tL.foldAt( 6 ).postln; // outputs 7\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example shows what happens when you try to aceess elements beyond the "
"end of a List with the \"foldAt()\" Function. For index numbers beyond the "
"end of the List, the interpreter will start moving back through the List, "
"towards the first element, \"folding\" through the List."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"\n"
"   tL = [42,820,7,19,23];\n"
"\n"
"   tL.wrapAt( 0 ).postln; // outputs 42\n"
"   tL.wrapAt( 1 ).postln; // outputs 820\n"
"   tL.wrapAt( 2 ).postln; // outputs 7\n"
"   tL.wrapAt( 3 ).postln; // outputs 19\n"
"   tL.wrapAt( 4 ).postln; // outputs 23\n"
"   tL.wrapAt( 5 ).postln; // outputs 42\n"
"   tL.wrapAt( 6 ).postln; // outputs 820\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example shows what happens when you try to access elements beyond the "
"end of a List with the \"wrapAt()\" Function. For index numbers beyond the "
"end of the List, the interpreter will start again at the beginning of the "
"List, \"wrapping\" around to the beginning."
msgstr ""

#. Tag: title
#, no-c-format
msgid "LinkedList"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Linked lists are very common structures for data management in computer "
"science. They are more efficient than arrays for many tasks, particularly "
"when it's impossible to know how many elements will be required in an array "
"until the program is run. <application>SuperCollider</application>'s List "
"Class is implemented with arrays, and it offers nearly the same "
"functionality as the LinkedList class."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A true linked list is accessed most efficiently from the start (called the "
"\"head\" of the list) or the end (called the \"tail\"). Each element is "
"linked to the one before it, the one after it, or both. "
"<application>SuperCollider</application>'s LinkedList Class has elements "
"which are linked both to the preceding and following elements, so it is "
"called a \"doubly linked list.\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Knowing when to use a LinkedList over a List is a question of efficiency, "
"and for small collections of information, it isn't going to make a big "
"difference - you might as well use a basic List. When you plan to store "
"hundreds or thousands of elements, choosing the right Class becomes more "
"important, and can save a lot of processor time. Here is how to know which "
"Class you should use:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you're going to be adding elements to the start or end of the list, and "
"accessing from the start or end of the list, the LinkedList Class will be "
"more efficient."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you're going to be adding elements at arbitrary index numbers "
"<emphasis>inside</emphasis> the list, and accessing elements at arbitrary "
"index numbers inside the list, the List Class will be more efficient."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you're going to be adding elements to the start or end, but accessing "
"specific indices, or adding elements at specific indices, but accessing from "
"the start or end, then you get to choose where to save computation time. In "
"one of these cases, it might not matter which one you choose."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Efficient Functions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"These Functions make use of the LinkedList Class in an efficient way. They "
"are efficient because they access only the first or last element in the "
"LinkedList."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>add( <replaceable>obj</replaceable> )</function> adds "
"<literal>obj</literal> to a LinkedList as the last item."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>addFirst( <replaceable>obj</replaceable> )</function> adds "
"<literal>obj</literal> to a LinkedList as the first item."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>pop</function> removes the last item in a LinkedList and returns "
"it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>popFirst</function> removes the first item in a LinkedList and "
"returns it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>first</function> returns a copy of the first item in a LinkedList."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>last</function> returns a copy of the last item in a LinkedList."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Inefficient Functions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"These Functions make use of the LinkedList Class in an inefficient way, but "
"they can be useful. They are inefficient because they may potentially have "
"to review all of the elements in a LinkedList before completing."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>at( <replaceable>index</replaceable> )</function> pretends the "
"LinkedList is an Array, and returns a copy of what would be the element at "
"the given index number."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>put( <replaceable>index</replaceable>, <replaceable>obj</"
"replaceable> )</function> pretends the LinkedList is an Array, and changes "
"the element at the given index number to be <literal>obj</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>remove( <replaceable>obj</replaceable> )</function> searches "
"through a LinkedList and removes the element judged to be equal to "
"<literal>obj</literal>, regardless of its index number."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>removeAt( <replaceable>index</replaceable> )</function> pretends "
"the LinkedList is an Array, and removes the element located at the given "
"index number."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Example"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example uses a LinkedList as a queue, adding numbers to the tail, and "
"removing and printing from the head."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = LinkedList.new;\n"
"\n"
"   tL.add( 42 );\n"
"   tL.add( 89 );\n"
"\n"
"   tL.popFirst.postln; // prints 42\n"
"\n"
"   tL.add( 256 );\n"
"\n"
"   tL.popFirst.postln; // prints 89\n"
"\n"
"   tL.add( 900 );\n"
"\n"
"   tL.popFirst.postln; // prints 256\n"
"   tL.popFirst.postln; // prints 900\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Other Collections"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As mentioned previously, the <application>SuperCollider</application> "
"language provides for many more kinds of data structures. The following "
"Collections are useful, but much more complex than those listed above. For "
"usage instructions, refer to the <application>SuperCollider</application> "
"documentation."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Dictionary: stores and allows retrieval of data by arbitrary Objects (for "
"example, by symbols, rather than by index numbers)."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Library: a type of Dictionary. Objects inserted can be used by any Object in "
"the program, like books in a real-world library can be used by anybody who "
"walks in."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Set: an unordered Collection of like Objects, where no two elements are "
"identical."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"SortedList: a List where all elements are kept in a sorted order, regardless "
"of how they are added. The inserted Objects should have a useful ordering "
"method, numerical or lexicographic (alphabetic, for example)."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Repeated Execution"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Repeating boring tasks is one of the main uses of computers, which don't "
"mind doing the same thing over and over again. More importantly, writing "
"code once and using it many times is much more intelligent than writing the "
"same code many times. Repetition of the same code is often problematic, and "
"repetition with subtle differences is even worse. Errors in this kind of "
"code are difficult to find in the first place, and more difficult to solve "
"effectively. Thankfully, as with most other things, "
"<application>SuperCollider</application> offers a wide variety of ways to "
"repeat code without re-writing it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The code structure used to create repetition is normally called a "
"<firstterm>loop</firstterm>. \"Do\" loops are <application>SuperCollider</"
"application>'s most versatile and useful repetition structure, and there are "
"a few different ways to think about and write it. The \"while\" loop is a "
"standard of most programming languages."
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"Do This to Everything in This Collection\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"One way to write a \"do\" loop is basically the same as telling the "
"interpreter to \"do this Function to every element in this Collection.\" The "
"syntax looks like this: <funcsynopsis> <funcprototype> "
"<funcdef><function>do</function></funcdef> <paramdef><parameter>aCollection</"
"parameter></paramdef> <paramdef>aFunction<funcparams>number, number</"
"funcparams></paramdef> </funcprototype> </funcsynopsis> ... or like this: "
"<funcsynopsis> <funcprototype> <funcdef><function><replaceable>aCollection</"
"replaceable>.do</function></funcdef> <paramdef>aFunction<funcparams>number, "
"number</funcparams></paramdef> </funcprototype> </funcsynopsis> This causes "
"<function>aFunction</function> to be executed once for each element in "
"<replaceable>aCollection</replaceable>, which can be any kind of Collection. "
"Each time <function>aFunction</function> is run, it is given two arguments, "
"in this order: an element of <replaceable>aCollection</replaceable>, and the "
"elements index number. For Collection's that don't have index numbers, it "
"returns what the element's index number would have been. The loop always "
"begins at the start of the Collection, and progresses with each element in "
"order to the end. The second argument, really, is the integers from zero to "
"one less than the number of elements in the Collection, increasing by one "
"each time the loop executes <function>aFunction</function>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"Do This, This Many Times\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Another way to write a \"do\" loop takes advantage of "
"<application>SuperCollider</application>'s flexibility, and is really the "
"same as one of the methods above. It's basically equivalent to telling the "
"interpreter to \"run this Function this many times.\" The syntax looks like "
"this, <funcsynopsis> <funcprototype> "
"<funcdef><function><replaceable>aNumber</replaceable>.do</function></"
"funcdef> <paramdef>aFunction<funcparams>number</funcparams></paramdef> </"
"funcprototype> </funcsynopsis> This causes <function>aFunction</function> to "
"be execute <replaceable>aNumber</replaceable> times. The interpreter still "
"provdies two arguments to <function>aFunction</function>, but they are the "
"same: it is the integers from zero to one less than <replaceable>aNumber</"
"replaceable>. You might also think of it as the number of times that "
"<function>aFunction</function> has been executed prior to this particular "
"execution."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Example \"Do\" Loops"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"These examples illustrate different ways to use \"do\" loops for trivial "
"tasks."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"   tL = [27, 46, 102, 81, 34, 0, 39, 26, 203, 62];\n"
"\n"
"   do( tL, { arg item, rep; [rep, item].postln; }; );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example is of the first syntax shown. For each element in <literal>tL</"
"literal>, the interpreter executes the function once, giving it "
"<emphasis>first</emphasis> the corresponding element of the Collection, and "
"<emphasis>then</emphasis> the iteration counter, which happens to be equal "
"to the element's List index number."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tL = List.new;\n"
"   var myFunc =\n"
"   {\n"
"      arg item;\n"
"      item.postln;\n"
"   };\n"
"\n"
"   tL = [27, 46, 102, 81, 34, 0, 39, 26, 203, 62];\n"
"\n"
"   tL.do( myFunc; );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example does several things differently, but maintains the same basic "
"functionality as the previous example. In this case, the Function only uses "
"the first argument that the interpreter provides, and completely ignores the "
"iteration counter. The syntax here also puts the Collection outside the "
"parentheses, which perhaps makes it more clear that <literal>tL</literal> is "
"not part of the function."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"(\n"
"   10.do( { \"repeat\".postln; }; );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example simply prints the string \"repeat\" ten times. If the Function "
"accepted one argument, it would receive the integers zero through nine. If "
"it accepted two arguments, both of the arguments would be equal."
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"Do This While\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"\"While\" loops execute continuously while their \"test condition\" is "
"evaluated to be \"true\". Upon reaching the loop, the "
"<application>SuperCollider</application> interpreter executes the test "
"condition. If it is \"fale\", the interpreter does not execute the loop, and "
"continues with the code after the loop. If it is \"true\", the interpreter "
"executes the code in the loop once, then re-executes the test condition. If "
"the test condition is \"true\", the loop is executed, the test condition re-"
"executed, and so on. Until the test condition returns \"false\", the "
"interpreter will never leave the loop."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here is the format of a \"while\" loop in <application>SuperCollider</"
"application>: <funcsynopsis> <funcprototype> <funcdef><function>while</"
"function></funcdef> <paramdef>boolean <replaceable>testFunction</"
"replaceable><funcparams>number</funcparams></paramdef> "
"<paramdef><replaceable>bodyFunction</replaceable><funcparams>number</"
"funcparams></paramdef> </funcprototype> </funcsynopsis> or like this: "
"<funcsynopsis> <funcprototype> <funcdef><replaceable>testFunction</"
"replaceable>.<function>while</function></funcdef> "
"<paramdef><replaceable>bodyFunction</replaceable><funcparams>number</"
"funcparams></paramdef> </funcprototype> </funcsynopsis> The test condition, "
"called <function>testFunc</function>, is a function which returns a boolean "
"value - either <literal>true</literal> or <literal>false</literal>. The "
"loop's body, called <function>bodyFunc</function>, is a function which can "
"do anything. The loop body function is not provided any arguments by the "
"interpreter. You will have to use comparison operators and boolean "
"expressions when writing the Function for the test condition. For "
"information on how these work in <application>SuperCollider</application>, "
"see <xref linkend=\"sect-Musicians_Guide-SC-Basic_Programming-"
"Conditional_Execution-Boolean_Operators\" /> and <xref linkend=\"sect-"
"Musicians_Guide-SC-Basic_Programming-Conditional_Execution-"
"Boolean_Expressions\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following three code blocks are equivalent:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"(\n"
"   10.do( { \"repeat\".postln; }; );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "and"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var counter = 0;\n"
"   while( { counter &lt; 10; }, { \"repeat\".postln; counter = counter + 1; "
"} );\n"
")\n"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var counter = 0;\n"
"   { counter &lt; 10; }.while( { \"repeat\".postln; counter = counter + 1; } "
");\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"You can see how it's easier to write this particular activity as a \"do\" "
"loop. It's often the case that a \"do\" loop better reflects what you want "
"to do, but not always."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Contemplate a situation where you are waiting for the user to input some "
"information, which you're going to use to calculate the rest of the "
"composition. The following example isn't real code. It's intended to "
"simplify a complex situation, so you can see where a \"while\" loop makes "
"more sense than a \"do\" loop."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"play( some background music );\n"
"while( { is the user still inputting information? }, { keep playing music } "
");\n"
"stop( some background music );\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The background music is begun, and then the interpreter would enter the loop."
" For as long as the user is still inputting information, the interpreter "
"will then \"keep playing music.\" When the user is not still inputting "
"information, the interpreter will move on to the next command, which stops "
"the music. An equivalent \"do\" loop would be very difficult to write, if "
"not impossible. This is because we won't know when the user has finished "
"inputting their information until <emphasis>after</emphasis> they've "
"finished, so we can't plan in advance for how long to play background music."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Thus, the most appropriate use of a \"while\" loop is for cases where you "
"cannot know in advance how many times something should be executed. For most "
"other cases of repeated execution, a \"do\" loop is the most appropriate "
"choice."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Other Loops"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The default language provides two other loop structures, both of which are "
"designed to iterate over a series of integer values: \"for\" loops and "
"\"forBy\" loops. Their use is more limited than \"do\" loops. They are "
"explained in the <application>SuperCollider</application> documentation."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Conditional Execution"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Conditional execution tells the <application>SuperCollider</application> "
"interpreter to execute code on the condition that something is true. "
"<application>SuperCollider</application> offers three conditional execution "
"structures, \"if\", \"switch\", and \"case\" statements. Each of these "
"structures is controlled by one or a series of \"boolean expressions\" "
"(sometimes called \"conditional expressions\"), which are composed of "
"\"boolean operators\"."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Boolean Operators"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Boolean operators evaluate to <literal>true</literal> or <literal>false</"
"literal>, and are most useful in boolean expressions, where they help to "
"determine which portion of a program to execute."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following table lists binary boolean operators that take two arguments: "
"one on the left and one on the right. These operators produce either "
"<literal>true</literal> or <literal>false</literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Binary Boolean Operators in SuperCollider"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Operator"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Meaning"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "&lt;"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "less than"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "&lt;="
msgstr ""

#. Tag: entry
#, no-c-format
msgid "less than or equal to"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "&gt;"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "greater than"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "&gt;="
msgstr ""

#. Tag: entry
#, no-c-format
msgid "greater than or equal to"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "=="
msgstr ""

#. Tag: entry
#, no-c-format
msgid "equivalent"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "!="
msgstr ""

#. Tag: entry
#, no-c-format
msgid "not equivalent"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "==="
msgstr ""

#. Tag: entry
#, no-c-format
msgid "identical (the same object)"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "!=="
msgstr ""

#. Tag: entry
#, no-c-format
msgid "not identical (not the same object)"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "&amp;&amp;"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "logical <literal>And</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "||"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "logical <literal>Or</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following table lists unary boolean operators that take one arguments. "
"These operators produce either <literal>true</literal> or <literal>false</"
"literal>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Unary Boolean Operators in SuperCollider"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "isPositive"
msgstr ""

#. Tag: entry
#, no-c-format
msgid ""
"<literal>true</literal> if the argument is greater than or equal to "
"<literal>0</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "isStrictlyPositive"
msgstr ""

#. Tag: entry
#, no-c-format
msgid ""
"<literal>true</literal> if the argument is greater than <literal>0</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "isNegative"
msgstr ""

#. Tag: entry
#, no-c-format
msgid ""
"<literal>true</literal> if <function>isPositive</function> is "
"<literal>false</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Unary operators are actually functions, and must be used as such."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"	var x = 5;\n"
"	x.isPositive; // returns \"true\"\n"
"	isNegative( x ); // returns \"false\"\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The use of these operators is explained below in the \"Boolean Expressions\" "
"section."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Boolean Expressions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Boolean expressions are expressions which, when executed, result in either "
"\"true\" or \"false\". Boolean expressions must use at least one boolean "
"operator (as listed above), or a Function which returns a boolean value. "
"Boolean expressions can also use other operators and Functions."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Simple Expressions"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here are a few simple boolean expressions. Of course, variables can be used "
"in place of constant numbers:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"5 &lt; 60; // evaluates to \"false\"\n"
"42 != 42; // evaluates to \"false\"\n"
"42 == 42; // evaluates to \"true\"\n"
"0.isPositive; // evaluates to \"true\"\n"
"isNegative( -256 ); // evaluates to \"true\"\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Assignment/Equality Mistake"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Beware the following pitfall, common to a large number of programming "
"languages:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"a == 42; // evaluates to \"true\" or \"false\", depending on the value in "
"\"a\"\n"
"a = 42; // assigns the value 42 to \"a\", over-writing the previously-stored "
"value\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "One possible work-around is to write the number first."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"42 == a; // evaluates to \"true\" or \"false\", depending on the value in "
"\"a\"\n"
"42 = a; // causes an error, because you can't assign a value to a constant "
"number\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This way, if you accidentally leave out one of the <literal>=</literal> "
"signs, the interpreter will stop execution and produce an error, rather than "
"continuing with an unexpected assignment."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Equality versus Identity"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The identity-equivalence operators are not usually needed."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var a = [12,24,48];\n"
"   var b = [12,24,48];\n"
"\n"
"   a == b; // evaluates to \"true\"\n"
"   a === b; // evaluates to \"false\"\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>==</literal> operator evaluates to <literal>true</literal> "
"because <literal>a</literal> and <literal>b</literal> represent equivalent "
"Objects - they are equal. The <literal>===</literal> operator evaluates to "
"<literal>false</literal> because <literal>a</literal> and <literal>b</"
"literal> represent different instances of the Objects - they are not "
"identical."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var a = [12,24,48];\n"
"   var b = a;\n"
"\n"
"   a == b; // evaluates to \"true\"\n"
"   a === b; // evaluates to \"true\"\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In this case, the <literal>==</literal> operator still evaluates to "
"<literal>true</literal>. The <literal>===</literal> operator also evaluates "
"to <literal>true</literal>, because <literal>a</literal> and <literal>b</"
"literal> both represent the same Object. When the interpreter evaluates "
"<code>var b = a;</code> in the example above, it actually assigns "
"<literal>b</literal> the same value that <literal>a</literal> stores, not a "
"copy of it."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Logical <literal>And</literal> and <literal>Or</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The logical And and Or operators must receive two boolean arguments. Logical "
"And returns <literal>true</literal> if both of its arguments are "
"<literal>true</literal>. Logical Or returns <literal>true</literal> if one "
"of its arguments are <literal>true</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following table illustrates how the <application>SuperCollider</"
"application> interpreter will evaluate each of the following situations."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Truth Table"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "If the left sub-expression is..."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "... and the right sub-expression is..."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "... then logical <literal>And</literal> evaluates to..."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "... and logical <literal>Or</literal> evaluates to..."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>true</literal>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<literal>false</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The interpreter evaluates the expression on the left first, and then the "
"expression on the right <emphasis>only</emphasis> if it will influence the "
"outcome. This means that, if the left-side expression of a logical Or "
"operator evaluates to \"true\", the interpreter will not test the right-side "
"expression, because the result will be \"true\" anyway. Similarly, if the "
"left-side expression of a logical And operator evaluates to \"false\", the "
"interpreter will not test the right-side expression, because the result will "
"be \"false\" anyway."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This can be exploited to help avoid errors like division-by-zero."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var x = 5.rand; // assigns a pseudo-random number between 0 and 5\n"
"\n"
"   ( x != 0 ) &amp;&amp; ( { x = 17 / x; } ); // doesn't divide by x if it "
"would cause division-by-zero\n"
"\n"
"   x; // the interpreter automatically prints this value after execution\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If the left-side expression of the logical And operator is \"false\", the "
"interpreter doesn't evaluate the right-side expression; it simply moves on "
"to the next expression. If the left-side expression is \"true\" (meaning "
"that x is not zero), then the right-side expression is evaluated. The right-"
"side expression happens to be a Function which assigns \"x\" the result of "
"dividing 17 by its previous value. The result of the logical And operation "
"is simply discarded in this case - it doesn't really matter to us. This "
"isn't the most straight-forward code, and there are other ways to avoid "
"division-by-zero. If you use this, it's probably best to include a brief "
"explanation of what the code does, as a commment."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you run this code many times, you will see that it gives many different "
"results - one of which is zero, which proves that the code works as intended."
" If <application>SuperCollider</application> divides by zero, the result is "
"\"inf\", representing infinity. Try modifying the code so that it will "
"divide by zero, and see what happens."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Order of Precedence"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In complicated boolean expressions, it's important to clarify the order in "
"which you want sub-expressions to be executed. This order is called the "
"\"order of precedence,\" or \"order of operations\" (see <citetitle>Order of "
"Operations (Wikipedia)</citetitle>, available at <ulink url=\"http://en."
"wikipedia.org/wiki/Order_of_operations\" /> for more information). In "
"computer science, different programming languages enforce different orders "
"of precedence, so you should use parentheses to clarify your intended order, "
"to proactively avoid later confusion. The interpreter will evaluate an "
"expression from left to right, and always fully evaluate parentheses before "
"continuing."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Even simple expression can benefit from parentheses. These produce the same "
"results:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var a = 5 == 5 &amp;&amp; 17 != 5;\n"
"   var b = ( 5 == 5 ) &amp;&amp; ( 17 != 5 ); // parentheses help to clarify\n"
"\n"
"   a == b; // evaluates to \"true\"\n"
")\n"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var a = 5.isPositive &amp;&amp; isNegative( 6 ) || 12 + 5 * 42 - 1 &gt; "
"18 ;\n"
"   var b = ( 5.isPositive &amp;&amp; isNegative( 6 ) ) || ( ((12 + 5) * 42 - "
"1) &gt; 18 ); // parentheses help to clarify\n"
"\n"
"   a &amp;&amp; b; // evaluates to \"true\"\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "And perhaps even more surprisingly..."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "( 12 + 5 * 42 - 1 ) != ( (12 + 5) * 42 - 1 );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"... evaluates to \"false\"! They're equal - the interpreter doesn't follow "
"the standard mathematical order of precedence rules! "
"<application>SuperCollider</application> evaluates from left to right, so "
"it's important to clarify to the interpreter what you mean. Where would you "
"put parentheses so that <application>SuperCollider</application> evaluates "
"the expression as per the standard mathematical order of precedence rules, "
"with multiplication before addition and subtraction?"
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"If This Is True, Then... \""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The \"if\" structure is provided a boolean expression and two Functions. If "
"the expression evaluates to \"true\", it executes one Function. If the "
"expression evaluates to \"false\", it executes the other Function."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here are the two ways to write an \"if\" structure:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "if ( booleanExpression, trueFunction, falseFunction );"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "booleanExpression.if( trueFunction, falseFunction );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"It's possible to exclude the <function>falseFunction</function>, which is "
"like telling the interpreter, \"If the boolean expression is true, then "
"execute this Function. Otherwise, don't execute it.\""
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var test = [true,false].choose; // pseudo-randomly chooses one of the "
"elements in the List\n"
"\n"
"   if ( ( true == test ), { \"It's true!\".postln; }, { \"It's false!\"."
"postln; } );\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example prints out a nice message, saying whether <literal>test</"
"literal> is <literal>true</literal> or <literal>false</literal>. Because "
"<literal>test</literal> is already a boolean value, we don't need to include "
"it in an expression. The \"if\" statement could have been shortened like "
"this: <code>if ( test, { \"It's true!\".postln; }, { \"It's false!\".postln; "
"} );</code>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Suppose we only wanted to be alerted if <literal>test</literal> is "
"<literal>true</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var test = [true,false].choose; // pseudo-randomly chooses one of the "
"elements in the List\n"
"\n"
"   test.if( { \"It's true!\".postln; } );\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In this example, the alternate \"if\" syntax is used, where the boolean "
"expression is placed before the parentheses."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"\"If\" structures can also be \"nested,\" which is like telling the "
"interpreter, \"If this is true, do this; otherwise if this is true, do this; "
"otherwise if this is true, do this.\" In this relatively simple example of "
"nesting, the interpreter evaluates each \"if\" structure only if the "
"previous one was \"false\"."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var test = [1,2,3].choose; // pseudo-randomly chooses one of the elements "
"in the List\n"
"\n"
"   if( 1 == test, { \"It's one!\".postln; },\n"
"      if( 2 == test, { \"It's two!\".postln; },\n"
"         if( 3 == test, { \"It's three!\".postln; } ) ) );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is a more complex example of nesting:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var testA = [1,2,3].choose; // pseudo-randomly chooses one of the "
"elements in the List\n"
"   var testB = [1,2,3].choose;\n"
"\n"
"   if( 1 == testA, { ( 1 == testB ).if( { \"It's one and one!\".postln; },\n"
"                        ( 2 == testB ).if( { \"It's one and two!\".postln; "
"},\n"
"                           ( 3 == testB ).if( { \"It's one and three!\"."
"postln; } ) ) ); },\n"
"      if( 2 == testA, { ( 1 == testB ).if( { \"It's two and one!\".postln; "
"},\n"
"                           ( 2 == testB ).if( { \"It's two and two!\"."
"postln; },\n"
"                              ( 3 == testB ).if( { \"It's two and three!\"."
"postln; } ) ) ); },\n"
"         if( 3 == testA, { ( 1 == testB ).if( { \"It's three and one!\"."
"postln; },\n"
"                             ( 2 == testB ).if( { \"It's three and two!\"."
"postln; },\n"
"                                 ( 3 == testB ).if( { \"It's three and "
"three!\".postln; } ) ) ); } ) ) );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As you can see, this type of nesting is not easy to figure out - from the "
"standpoint of the original programmer or somebody else who wishes to use "
"your code. In writing this example, it took me several attempts before "
"getting the parentheses and braces right. Usually, if you have a long list "
"of possibilities to test (like the nine in this example), it is better to "
"use a \"case\" or \"switch\" structure. Not only does this help to make the "
"code easier to understand, but the <application>SuperCollider</application> "
"interpreter can apply optimizations that make the code run marginally faster."
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"Switch Execution to This Path\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A \"switch\" structure can be most easily understood by comparison to a "
"switch in a railway line. As a train approaches a railway switch, an "
"operator inspects the train, and decides whether it should be going to the "
"passenger station, the freight station, or the garage for storage. A "
"\"switch\" structure - like a railways switch, can only act on one Object at "
"a time, but the Object can be a Collection, allowing you to compare multiple "
"things at once. Each case is tested with the boolean equality operator "
"before being executed."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is the syntax of a \"switch\" statement:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"case( compareThis,\n"
"   toThis1, { doThis; },\n"
"   toThis2, { doThis; },\n"
"   toThis3, { doThis; }\n"
");\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"You can include any number of cases. Notice that there is no comma after the "
"last case, and that I've put the concluding \");\" on a separate line with "
"the same indentation as the word \"case\", so that it's easy to see."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following example shows a simple switch."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var grade  = 11.rand + 1; // pseudo-randomly chooses 0 to 11, then adds 1 "
"to give 1 to 12\n"
"\n"
"   grade =\n"
"   switch( grade,\n"
"      1, { \"D-\" },\n"
"      2, { \"D\" },\n"
"      3, { \"D+\" },\n"
"      4, { \"C-\" },\n"
"      5, { \"C\" },\n"
"      6, { \"C+\" },\n"
"      7, { \"B-\" },\n"
"      8, { \"B\" },\n"
"      9, { \"B+\" },\n"
"      10, { \"A-\" },\n"
"      11, { \"A\" },\n"
"      12, { \"A+\" }\n"
"   );\n"
"\n"
"   (\"Your grade is\" + grade).postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The code picks a pseudo-random number between 1 and 12, then uses a "
"\"switch\" structure to convert that number into a letter-grade, assigning "
"it to the same <literal>grade</literal> variable. Then, it adds the \"Your "
"grade is\" string to the value of <literal>grade</literal> (with a space "
"between), and prints that result."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This example avoids the complex nested \"if\" structure from above."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var testA = [1,2,3].choose; // pseudo-randomly chooses one of the "
"elements in the List\n"
"   var testB = [1,2,3].choose;\n"
"\n"
"   switch( [testA,testB],\n"
"      [1,1], { \"It's one and one!\".postln; },\n"
"      [1,2], { \"It's one and two!\".postln; },\n"
"      [1,3], { \"It's one and three!\".postln; },\n"
"      [2,1], { \"It's two and one!\".postln; },\n"
"      [2,2], { \"It's two and two!\".postln; },\n"
"      [2,3], { \"It's two and thre!\".postln; },\n"
"      [3,1], { \"It's three and one!\".postln; },\n"
"      [3,2], { \"It's three and two!\".postln; },\n"
"      [3,3], { \"It's three and three!\".postln; }\n"
"   );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is an elegant way to inspect two otherwise-separate variables. Remember "
"that the first argument to \"switch\" (in this case, it's "
"<code>[testA,tesB]</code>) is compared to the first argument of possibe "
"result with the equality operator: <literal>==</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When evaluating which switch to use, the <application>SuperCollider</"
"application> interpreter will always apply the <emphasis>last</emphasis> one "
"that evaluates to <literal>true</literal>."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   switch( 5,\n"
"      5, { \"one\".postln; },\n"
"      5, { \"two\".postln; },\n"
"      5, { \"three\".postln; }\n"
"   );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"All of these cases are true, but this will always result in \"three\" being "
"printed."
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"In This Case, Do This\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"\"Case\" and \"switch\" structures look similar, but work in subtly "
"different way. A \"switch\" structure is like a railway switch, allowing one "
"train to be routed onto the right track, according to qualities of the train."
" A \"case\" structure, on the other hand, works like somebody trying to "
"decide how to get to work. The person might ask themselves how far they are "
"going, how long they have to get to work, how fast the available options "
"are, what the available options cost, and so on. While in a \"switch\" "
"structure, the path of execution is determined by examining only one Object, "
"a \"case\" structure determines the path of execution based on any number of "
"things."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is the syntax of a \"case\" structure:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"case\n"
"   &lt;replaceable&gt;booleanFunction&lt;/replaceable&gt; "
"&lt;replaceable&gt;resultFunction&lt;/replaceable&gt;\n"
"   &lt;replaceable&gt;booleanFunction&lt;/replaceable&gt; "
"&lt;replaceable&gt;resultFunction&lt;/replaceable&gt;\n"
"   &lt;replaceable&gt;booleanFunction&lt;/replaceable&gt; "
"&lt;replaceable&gt;resultFunction&lt;/replaceable&gt;\n"
"   &lt;replaceable&gt;booleanFunction&lt;/replaceable&gt; "
"&lt;replaceable&gt;resultFunction&lt;/replaceable&gt;\n"
";\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Contemplate the following pseudo-code example, which represents a possible "
"musical sitation, and a good use of the \"case\" structure."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var coolFunction =\n"
"   {\n"
"      case\n"
"         { is there no music playing?\n"
"           AND people are in the room } { play music }\n"
"         { has the same song been playing for too long?\n"
"           OR is the song boring? } { change the song }\n"
"         { has everybody left the room? } { turn off the music }\n"
"         { has a song been requested? } { change to that song }\n"
"         { is the music too loud? } { lower the music's volume }\n"
"         { is the music too quiet? } { raise the music's volume }\n"
"         { is the music too fast? } { lower the music's tempo }\n"
"         { is the music too slow? } { raise the music's tempo }\n"
"         { is everything okay? } { wait for 10 seconds }\n"
"      ;\n"
"   };\n"
"\n"
"   ( 5 == 5 ).while( coolFunction ); // executes coolFunction contiuously\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"It might seem like this example doesn't relate to a real "
"<application>SuperCollider</application> programming situation, but in fact "
"it might. If you could program Function's which determined all of those "
"questions and all of the answers, this sort of \"case\" structure would be "
"very helpful in a situation where a computer running "
"<application>SuperCollider</application> were left in a room by itself, and "
"expected to play music whenever anybody entered the room. Since five is "
"always equal to five, the interpreter will run <function>coolFunction</"
"function> forever. If the music needs adjustment in some way, the Function "
"will adjust the music. If everything is okay, then the interpreter will wait "
"for 10 seconds, and then the loop will cause the Function to be re-evaluated."
" Because many different criteria are evaluated in the \"case\" structure, "
"this represents an efficient use of the structure."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"\"Case\" structures can be used to do the same thing as \"switch\" "
"structures, but it's usually less elegant solution. Also, it doesn't allow "
"the interpreter to use an speed optimization that it would have used in an "
"equivalent \"switch\" structure."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var grade  = 11.rand + 1; // pseudo-randomly chooses 0 to 11, then adds 1 "
"to give 1 to 12\n"
"\n"
"   grade =\n"
"   case\n"
"      { 1 == grade; } { \"D-\" }\n"
"      { 2 == grade; } { \"D\" }\n"
"      { 3 == grade; } { \"D+\" }\n"
"      { 4 == grade; } { \"C-\" }\n"
"      { 5 == grade; } { \"C\" }\n"
"      { 6 == grade; } { \"C+\" }\n"
"      { 7 == grade; } { \"B-\" }\n"
"      { 8 == grade; } { \"B\" }\n"
"      { 9 == grade; } { \"B+\" }\n"
"      { 10 == grade; } { \"A-\" }\n"
"      { 11 == grade; } { \"A\" }\n"
"      { 12 == grade; } { \"A+\" }\n"
"   ;\n"
"\n"
"   (\"Your grade is\" + grade).postln;\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example is equivalent to one of the \"switch\" structure examples. This "
"is not a good use of the \"case\" structure, because it requires a lot of "
"code repetition."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Unlike a \"switch\" structure, a \"case\" structure will always follow the "
"<emphasis>first</emphasis> case that evaluates to \"true\"."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   case\n"
"      { 5 == 5; } { \"one\".postln; }\n"
"      { 5 == 5; } { \"two\".postln; }\n"
"      { 5 == 5; } { \"three\".postln; }\n"
"   ;\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This example will always result in \"one\" being printed."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Combining Audio; the Mix Class"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"One of the requirements of multi-channel audio is the ability to combine a "
"large number of UGen's into a small number of channels - normally just two. "
"The <application>SuperCollider</application> interpreter allows you to "
"accomplish this in a number of ways, which are explained here."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The \"Mix\" Class"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The \"Mix\" Class allows you to combine a mutli-channel Array into one "
"channel. It's just that simple: you put in an Array of UGens, and out comes "
"a single-channel combination of them."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here are the two possible syntaxes for the \"Mix\" Class: <funcsynopsis> "
"<funcprototype> <funcdef><function>Mix.new</function></funcdef> "
"<paramdef><parameter>ArrayOfUGens</parameter></paramdef> </funcprototype> </"
"funcsynopsis> and <funcsynopsis> <funcprototype> <funcdef><function>Mix</"
"function></funcdef> <paramdef><parameter>ArrayOfUGens</parameter></paramdef> "
"</funcprototype> </funcsynopsis> The second form is simply a short-hand "
"version of the first. The <classname>Mix</classname> Class doesn't really "
"create \"Mix\" Objects either - it's just a Function that combines many "
"UGen's into one."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here's an example of the \"Mix\" Class in action:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   Mix( [SinOsc.ar(220, 0, 0.1),\n"
"         SinOsc.ar(440, 0, 0.1),\n"
"         SinOsc.ar(660, 0, 0.1),\n"
"         SinOsc.ar(880, 0, 0.1),\n"
"         SinOsc.ar(850, 0, 0.1),\n"
"         SinOsc.ar(870, 0, 0.1),\n"
"         SinOsc.ar(880, 0, 0.1),\n"
"         SinOsc.ar(885, 0, 0.1),\n"
"         SinOsc.ar(890, 0, 0.1),\n"
"         SinOsc.ar(1000, 0, 0.1)] );\n"
"}.play;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Notice how all of these <classname>SinOsc</classname>s are heard through the "
"left channel only. The <classname>Mix</classname> class mixes all the UGen's "
"together into one. You could use a bus to send the audio to both the left "
"and right channels. What happens if we don't use the <classname>Mix</"
"classname> class? Try to remove the function, and find out. You only hear "
"some of the <classname>SinOsc</classname>'s. Which ones? The first two, "
"representing the left and right channels. If your audio interface has more "
"than two channels, you may be able to hear more than those first two "
"channels."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There is another function offered by the <classname>Mix</classname> class, "
"and it is a kind of loop. The function is called <function>Fill</function>, "
"and it takes two arguments: the number of times to run a function, and the "
"function to run. The function is provided with one argument (like in a "
"\"do\" loop), which is the number of times the function has "
"<emphasis>already</emphasis> been run."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var n = 8;\n"
"   var sineFunc =\n"
"   {\n"
"      arg iteration;\n"
"\n"
"      var freq = 440 + iteration;\n"
"      SinOsc.ar( freq:freq, mul:1/n );\n"
"   };\n"
"\n"
"   { Mix.fill( n, sineFunc ); }.play;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As you can see, the <function>fill</function> function itself is quite "
"simple: you provide the number of UGen's to create, and a function that "
"creates UGen's. It's the <literal>sineFunc</literal> function that is a "
"little confusing. The argument is called \"iteration\", because it holds how "
"many times the function has already been run - how many iterations have "
"happened already. It uses this value to help calculate the frequency (stored "
"in a variable called <literal>freq</literal>), and then creates a "
"<classname>SinOsc</classname> UGen. The <literal>mul</literal> argument "
"helps to automatically control the volume level. Since the total volume "
"should be no more than 1.0, the <function>sineFunc</function> function "
"calculates UGen's' volume by dividing 1, the maximum level, by the number of "
"UGen's that will be created. The slowly pulsating volume is part of the "
"acoustic result of this many frequencies being so close together - it is not "
"a hidden effect by <application>SuperCollider</application>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Arrays of Arrays"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There is another way to combine many UGen's into two channels for stereo "
"output: rather than sending the Array's to the Mix class, combine them into "
"a two-element Array."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   [\n"
"      [ SinOsc.ar(440, 0, 0.1), SinOsc.ar( 880, 0, 0.1 ), SinOsc.ar( 1660, "
"0, 0.1 ) ],\n"
"      [ SinOsc.ar(440, 0, 0.1), SinOsc.ar( 880, 0, 0.1 ), SinOsc.ar( 1660, "
"0, 0.1 ) ]\n"
"  ];\n"
"}.play;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here, a two-element Array is the result of a Function, which gets sent the "
"\"play\" message. Each of the elements is an equivalent, three-element Array "
"where each element is a UGen."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This representation also offers another benefit: each UGen can have a "
"different \"mul\" value, which will be preserved."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   [\n"
"      [ SinOsc.ar(440, 0, 0.2), SinOsc.ar( 880, 0, 0.1 ), SinOsc.ar( 1660, "
"0, 0.05 ) ],\n"
"      [ SinOsc.ar(440, 0, 0.2), SinOsc.ar( 880, 0, 0.1 ), SinOsc.ar( 1660, "
"0, 0.05 ) ]\n"
"  ];\n"
"}.play;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This sounds much less harsh than the first example. Try it with the Mix "
"Class. Even with the different \"mul\" values, it sounds the same as the "
"first example! This helps Mix to ensure that the total level doesn't exceed "
"1.0, but it has the disadvantage that careful level-balancing on your part "
"will be erased."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Addition"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This method of combinine UGen's into two channels uses the addition operator:"
" +"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"{\n"
"   [\n"
"      ( SinOsc.ar(440, 0, 0.1) + SinOsc.ar( 880, 0, 0.1 ) + SinOsc.ar( 1660, "
"0, 0.1 ) ),\n"
"      ( SinOsc.ar(440, 0, 0.1) + SinOsc.ar( 880, 0, 0.1 ) + SinOsc.ar( 1660, "
"0, 0.1 ) )\n"
"  ];\n"
"}.play;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Notice that, like with the Mix Class, independent \"mul\" levels are not "
"preserved."
msgstr ""

#. Tag: title
#, no-c-format
msgid "SynthDef and Synth"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The preceding sections of this \"Basic Programming\" guide have only created "
"sound with Function's. The truth is that Function's are very useful for "
"creating sound, but they represent a simplification of the actual commands "
"and Functions that must be run by the interpreter in order to create sound."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"// When you write this...\n"
"(\n"
"   { SinOsc.ar( freq:440, mul:0.2 ); }.play;\n"
")\n"
"\n"
"// The interpreter actually does this...\n"
"(\n"
"   SynthDef.new( \"temp__963\", { Out.ar( 0, SinOsc.ar( freq:440, mul:0.2 ) "
"); } ).play;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Yikes! Don't despair - it's easy to understand - it just looks scary!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "\"Out\" UGen"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The \"Out\" UGen is one of the bits of magic automatically taken care of by "
"the interpreter. It routes an audio signal from another UGen into a specific "
"output (actually, into a specific bus - see <xref linkend=\"sect-"
"Musicians_Guide-SC-Basic_Programming-Busses\" />)."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following examples have the same effect:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ SinOsc.ar( freq:500, mul:0.2 ); }.play;"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ Out.ar( 0, SinOsc.ar( freq:500, mul:0.2 ) ); }.play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The first argument to \"Out.ar\" is the bus number for where you want to "
"place the second argument, which is either a UGen or a multi-channel Array "
"of UGen's. If the second argument is an Array, then the first element is "
"sent to the first argument's bus number, the second argument is sent to one "
"bus number higher, the third to two bus numbers higher, and so on. This "
"issues is explained fully in <xref linkend=\"sect-Musicians_Guide-SC-"
"Basic_Programming-Busses\" />, but here is what you need to know for now, "
"working with stereo (two-channel) audio:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "If the second argument is a two-element Array, use bus number 0."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If the second argument is a single UGen, and you want it to be heard through "
"the left channel, use bus number 0."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If the second argument is a single UGen, and you want it to be heard through "
"the right channel, use bus number 1."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you're still struggling with exactly what the \"Out\" UGen does, think of "
"it like this: when you create an audio-rate UGen, it starts creating an "
"audio signal; the \"Out\" UGen effectively connects the audio-rate UGen into "
"your audio interface's output port, so it can be heard through the speakers. "
"In <xref linkend=\"sect-Musicians_Guide-SC-Basic_Programming-Busses\" />, it "
"becomes clear that there are, in fact, other useful places to connect an "
"audio-rate UGen (through an effect processor, for example), and the \"Out\" "
"UGen can help you do that."
msgstr ""

#. Tag: title
#, no-c-format
msgid "SynthDef"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A SynthDef is what we use to tell the server how to create sound. In order "
"to truly understand what SynthDef accomplishes, we need to recall the "
"disconnect between the interpreter and the server. In reality, the "
"interpreter has no idea how to make sound or work with audio hardware. The "
"server, likewise, has no understanding at all of the "
"<application>SuperCollider</application> language. The interpreter takes the "
"code that we write, and does one of a number of things, depending on the "
"nature of the code:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "executes it completely,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "executes it partially, makes choices, and then does something else"
msgstr ""

#. Tag: para
#, no-c-format
msgid "send the server information about how to synthesize sound,"
msgstr ""

#. Tag: para
#, no-c-format
msgid "etc."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"For simple code like <code>2.postln;</code> the interpreter just executes it."
" For code like <code>{ SincOsc.ar; }.play;</code> the interpreter expands it "
"a bit, then sends instructions to the server, which deals with the rest of "
"the synthesis process."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"A SynthDef is part of this last process; SynthDef Objects represent the "
"synthesis information that is sent to the server before (or at the same time "
"as) telling the server to play the sound."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are two steps to creating a useful SynthDef: making an interpreter "
"Object, and sending the actual synthesis information to the server. There "
"are two ways to write this, as follows:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"<replaceable>someVariable</replaceable> = SynthDef.new( "
"<replaceable>nameOfSynthDef</replaceable>, "
"<replaceable>FunctionContainingOutUGen</replaceable> );\n"
"<replaceable>someVariable</replaceable>.send( <replaceable>nameOfServer</"
"replaceable> );\n"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"SynthDef.new( <replaceable>nameOfSynthDef</replaceable>, "
"<replaceable>FunctionContainingOutUGen</replaceable> ).send( "
"<replaceable>nameOfServer</replaceable> );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <function>FunctionContainingOutUGen</function> is simply that - a "
"function that, when executed, returns an <classname>Out</classname> UGen "
"(meaning that the <classname>Out</classname> UGen must be the last "
"expression in the function). The <literal>nameOfSynthDef</literal> should be "
"a symbol (as described in <xref linkend=\"sect-Musicians_Guide-SC-"
"Basic_Programming-SynthDef_and_Synth-Symbols\" />), but can also be a string."
" The <literal>nameOfServer</literal> is a variable that represents the "
"server to which you want to send the SynthDef's information; unless you know "
"that you need to use a different variable for this, it's probably just the "
"letter \"s\", which the interpreter automatically assigns to the default "
"server."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here is a demonstration of both methods:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var playMe =\n"
"   {\n"
"      Out.ar( 0, SinOsc.ar( freq:440, mul:0.2 ) );\n"
"   };\n"
"\n"
"   var playMeSynthDef = SynthDef.new( \\playMe, playMe );\n"
"\n"
"   playMeSynthDef.send( s );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var playMe =\n"
"   {\n"
"      Out.ar( 0, SinOsc.ar( freq:440, mul:0.2 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\playMe, playMe ).send( s );\n"
"\n"
"   nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The only advantage to assigning something to a variable is the ability to "
"refer to it later. If you use the first method, then you can send the "
"SynthDef to more than one server. Since it's rare that you will want to use "
"more than one server, it's usually better to use the second style. In fact, "
"if you won't be using the \"playMe\" Function again, you don't need to "
"assign it to a variable!"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"SynthDef.new( \\playMe, { Out.ar( 0, SinOsc.ar( freq:440, mul:0.2 ) ); } )."
"send( s );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is all that's really needed to create and send a synthesis definition "
"to the server. It looks long and frightening, but now at least you "
"understand what all of the parts do."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Load"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There is another way to send a SynthDef to the server: the \"load\" Function."
" The \"send\" Function sends the synthesis information to the server, which "
"stores it in memory. When the server stops running, all synthesis "
"information given with \"send\" is lost. The \"load\" Function, on the other "
"hand, sends the synthesis information to the server, which stores it on disk "
"and in memory. Every time the server is started, it loads all of the "
"synthesis information previously sent to it with the \"load\" Function. The "
"definition remains until you delete it specifically. This is most useful for "
"a SynthDef that takes up a lot of memory, and which would use considerable "
"network time to transfer to the server whenever the server is run. It is "
"also useful to use the \"load\" Function instead of \"send\", when there are "
"a lot of SynthDef's, regardless of the size of each one. The idea is the "
"same: avoid sending the SynthDef in order to save time."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The syntax and usage for \"load\" is the same as for \"send\"."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Symbols"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As stated in the section about variables, a symbol is simply something which "
"represents something else. When used in the context of a SynthDef, a symbol "
"is a string of characters that refers to a SynthDef that we've already sent "
"to the server. What wasn't mentioned in the section about variables is that, "
"in addition to the symbols that can be used as variable names, the "
"<application>SuperCollider</application> language provides a distinct data-"
"type (like numbers or strings) for symbols. Many programming languages don't "
"provide a \"symbol\" data-type, so many programmers do not use them "
"extensively, but they are very handy for situations like this. As local "
"variable names are symbols representing data stored by the interpreter, here "
"we are using the symbol data-type to refer to data stored on the server."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Symbols are a better way to name SynthDef's than strings. Not only do "
"symbols take up less memory, they aren't actually the interpreter doesn't "
"actually think of them as Objects, and neither should you. Symbols are "
"universally unique; only one instance of a symbol with the same characters "
"can exist. On the other hand, an infinite number of strings with the same "
"characters can exist. When we use a symbol, we are defining it universally. "
"When we use a string, the server pretends that all strings with the same "
"characters are the same philosophical object, even though they aren't. This "
"isn't a technical problem, but it can be difficult to think about, and is "
"cognitively dissonant."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If all this seems a little abstract and ontological, that's because it is."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Symbols: the Easy Way"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Symbols are things that you should use to identify a SynthDef sent to the "
"server."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Writing Symbols"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are two ways to write out a symbol: between single-quotation marks, "
"and after a back-slash. Symbols given between single-quotation marks can "
"contain any characters but a single-quotation mark. Symbols given after a "
"back-slash can contain any characters but a space. Neither type of symbol "
"name can cross onto a new line."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following example contains some valid symbols, and some invalid symbols."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"\\stopSign \\\\ this is a symbol\n"
"\\stop sign \\\\ this is a symbol called 'stop' followed by the unrelated "
"word 'sign'\n"
"'stopSign' \\\\ this is a symbol\n"
"'stop sign' \\\\ this is a symbol\n"
"'stop\n"
"sign' \\\\ these lines are not a symbol, and will cause an error\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The following example illustrates the differences between strings and "
"symbols."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"var a = \"stop sign\" \\\\ a string\n"
"var b = \"stop sign\" \\\\ a string with the same letters as the first "
"string\n"
"a == b; \\\\ returns \"true\" because the strings are equivalent\n"
"a === b; \\\\ returns \"false\" because the strings are separate copies with "
"the same characters\n"
"\n"
"var c = 'stop sign' \\\\ a symbol\n"
"var d = 'stop sign' \\\\ the same symbol\n"
"c == d; \\\\ returns \"true\" because the symbols are equivalent\n"
"c === d; \\\\ returns \"true\" because the symbols are identical\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "SynthDef Becomes Synth"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"After you send a SynthDef to the server, you can put it into action. When "
"the interpreter tells the server to play a synthesis definition (which the "
"interpreter holds in a SynthDef Object), the server creates a synth from the "
"definition, and starts generating sound. The interpreter gives us a Synth "
"Object to represent each synth on the server, so that we can control the "
"synth."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is the syntax used to create a new synth, after its definition has been "
"sent to the server. <funcsynopsis> <funcprototype> <funcdef><function>Synth."
"new</function></funcdef> <paramdef><parameter>nameOfSynthDef</parameter></"
"paramdef> </funcprototype> </funcsynopsis> The name will be a symbol or a "
"string - whatever you supplied when you ran the <function>SynthDef.new()</"
"function> function."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Because we're creating a new Synth Object, we should assign it to a "
"variable, for later reference."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"SynthDef.new( \\playMe, { Out.ar( 0, SinOsc.ar( freq:440, mul:0.2 ) ); } )."
"send( s );\n"
"var mySynth = Synth.new( \\playMe );\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Recall that the interpreter automatically uses the Synth and SynthDef "
"Classes when we send the \"play\" message to a Function. We can actually "
"capture and use the Synth Object created from \"play-ing\" a Function, too. "
"This example is almost the same as the previous one."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "var mySynth = { SinOsc.ar( freq:443, mul:0.2 ); }.play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The difference is subtle: after the second example, we have no control over "
"what name the interpreter gives to the SynthDef that it sends to the server, "
"so we can't re-use the SynthDef. On the other hand, because we assign the "
"name <literal>\\sillyTutorialSD</literal> to the SynthDef in the first "
"example, we know what it's called, and we can re-use it. Theoretically, we "
"can make an infinite number of synths from this single definition. "
"Realistically, it's limited by the amount of memory the server can use; for "
"most modern computers, this number is so high that we don't ever need to "
"worry about it."
msgstr ""

#. Tag: para
#, no-c-format
msgid "As usual, the interpreter provides us with an optional short-cut:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"var mySynth = SynthDef.new( \\playMe, { Out.ar( 0, SinOsc.ar( freq:440, mul:"
"0.2 ) ); } ).play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This automatically sends the synthesis information to the server, creates a "
"synth, and plays it. What minor functionality is lost when we use this "
"shortcut?"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Shortcomings of a SynthDef"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Consider the following program:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      var frequency = 440.rand + 440; // produces an integer between 440 and "
"880\n"
"      SinOsc.ar( freq:frequency, mul:0.025 );\n"
"   };\n"
"\n"
"   10.do( { myRandFunc.play; } );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Execute the program a few times. The result will be different each time: ten "
"different SinOsc's with ten different frequencies."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"What if we convert the program to use a SynthDef and multiple Synth's "
"instead? This program will probably cause an error the first time - this is "
"exaplained below."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      var frequency = 440.rand + 440; // produces an integer between 440 and "
"880\n"
"      Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.025 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\myRandFunc, myRandFunc ).send( s );\n"
"\n"
"   10.do( { Synth.new( \\myRandFunc ); } );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Execute the program a few times. The result is still different each time, "
"but it's the <emphasis>same</emphasis> ten SinOsc's, all with the same "
"frequency. This is the nature of a SynthDef: once it's sent to the server, "
"you can create a synth from the same instructions without resending them."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This program causes an error the first time you run it. Inspect the error "
"messages, and see if you can determine why. It's because the server is "
"processing commands <emphasis>asynchronously</emphasis>: things don't happen "
"right when the interpreter asks, but very shortly thereafter. The result is "
"that the server is asked to make a new synth before it deals with the synth "
"definition. There are ways to get around this, but they're too complex for "
"this section - for now (to simplify this text's examples), just accept that "
"the error may happen the first time you run a Synth."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Creating Change Anyway"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The way to create change and pseudo-randomness anyway is to incorporate "
"another UGen to do it for you. Remember: when you send synthesis information "
"to the server, that information can't change unless you replace it. This "
"doesn't mean that the output produced by the synth can't change!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The way to do this is with control-rate UGen's. The following example uses a "
"control-rate SinOsc to set the frequency of an audio-rate SinOsc."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      var frequency = SinOsc.kr( freq:0.5, add:660, mul:220 ); // oscillates "
"between 440 and 880, hitting each extreme every 2 seconds\n"
"      Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.2 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\myRandFunc, myRandFunc ).send( s );\n"
"\n"
"   Synth.new( \\myRandFunc );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When you use a UGen as a control-rate UGen, you have to think about its "
"arguments quite differently than when using it as an audio-rate UGen. This "
"table shows how the same argument gives a different result for an audio-rate "
"vs. control-rate UGen used for pitch:"
msgstr ""

#. Tag: title
#, no-c-format
msgid ""
"Parameters in Audio-Rate and Control-Rate <classname>SinOsc</classname> "
"UGens"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Parameter"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "In an audio-rate UGen..."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "In a control-rate UGen..."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "freq"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "controls the pitch"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "controls the speed of oscillation"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "add"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "??"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "sets the middle point of the sine wave by adding this to the output"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "mul"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "controls volume level"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "sets the deviation from \"add\""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"For an audio-rate SinOsc UGen, you set the frequency and the volume level. "
"For a control-rate UGen, you set the mid-point of oscillation with "
"<literal>add</literal>, the extremes of oscillation which will be <code>add -"
" mul</code> and <code>add + mul</code>, and the speed of oscillation with "
"<literal>freq</literal>. The end result is very different numbers."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There is a handy UGen designed specifically for replacing pseudo-randomness "
"in Functions. The following example restores the \"ten different pitches\" "
"to the example from the last section."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      var frequency = Rand( 440, 880 ); // produces an integer between 440 "
"and 880\n"
"      Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.025 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\myRandFunc, myRandFunc ).send( s );\n"
"\n"
"   10.do( { Synth.new( \\myRandFunc ); } );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you run this multiple times, you will again hear ten different pitches. "
"Depending on audio hardware, previous musical experience, and other factors, "
"some people may have difficulty hearing that the pitches are different. Try "
"reducing the number of synths created in the loop."
msgstr ""

#. Tag: title
#, no-c-format
msgid "SynthDef with Arguments"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are some siutations where you simply cannot pre-determine all of the "
"material that you're going to use when creating a synth. It might be easier "
"to resort to using a Function rather than a SynthDef, but there is yet "
"another solution - creating an argument in your SynthDef Function."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"With only a subtle change to our Function, we can add the possibility of "
"passing arguments on synth creation:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"var myRandFunc =\n"
"{\n"
"   arg frequency = Rand( 440, 880 ); // default value between 440 and 880\n"
"   Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.025 ) );\n"
"};\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"I've decided to use the Rand UGen anyway, so that supplying a frequency is "
"optional. This adds functionality while making the added complexity optional:"
""
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      arg frequency = 440;\n"
"      Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.025 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\myRandFunc, myRandFunc ).send( s );\n"
"\n"
"   10.do( { Synth.new( \\myRandFunc ); } );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you use the SynthDef in the old way, as in the example, you'll get the "
"expected result: ten Synth's, all with the same frequency. But, if you add a "
"\"rand\" Function call into the loop, you can get ten different frequencies!"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      arg frequency = 440;\n"
"      Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.025 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\myRandFunc, myRandFunc ).send( s );\n"
"\n"
"   10.do( { Synth.new( \\myRandFunc, [\\frequency,(440.rand + 440)] ); } );\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Notice how we supply arguments: an Array with elements alternating between a "
"string-quoted parameter name, and the value of the argument itself. If we "
"\"parameterized\" all three main fields of the SinOsc, we could supply them "
"like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "Synth.new( \\mySinOsc, [\\freq,440,\\add,0,\\mul,0.2] );"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Things to Do with a SynthDef: Set and Free"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Once you send a synth definition to the server, and make some synths, you've "
"collected a few Synth Objects, and you wonder what to do with them next. Of "
"course, you could listen to them, but you can also change the arguments that "
"you used, and stop it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"To change the arguments used by a synth, send it the \"set\" message, with a "
"list of arguments:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"<replaceable>variableHoldingSynth</replaceable>.set( "
"[<replaceable>\\argument1</replaceable>,<replaceable>value</"
"replaceable>,<replaceable>\\argument2</replaceable>,<replaceable>value</"
"replaceable>,...] );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This helps to save even more time and memory: rather than destroying and "
"creating synths all the time, you can simply change pre-existing ones."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This modification of the ten-pseudo-random-tones example includes an extra "
"line that lets you change the tones without destroying and re-creating the "
"synths."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"// run this first\n"
"h = List.new;\n"
"\n"
"// run this second\n"
"(\n"
"   var myRandFunc =\n"
"   {\n"
"      arg frequency = 440;\n"
"      Out.ar( 0, SinOsc.ar( freq:frequency, mul:0.025 ) );\n"
"   };\n"
"\n"
"   SynthDef.new( \\myRandFunc, myRandFunc ).send( s );\n"
")\n"
"\n"
"// run this third\n"
"10.do( { h.add( Synth.new( \\myRandFunc, [\\frequency,(440.rand + 440)] ) ); "
"} );\n"
"\n"
"// run this fourth, as many times as you please\n"
"h.do( { arg item; item.set( \\frequency, (440.rand + 440) ); } );\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The reason that you have to run each of those segments separately is two-"
"fold: we need to store the List of Synth's in a single-letter variable "
"because, for this simple demonstration, this is the most efficient way; "
"second, for the asynchronous behaviour of the server that was previously "
"noted as causing an error."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The only aspect of that example that's a little tricky to understand is the "
"\"do\" loop. Remember that when you run a \"do\" loop on a List, the "
"interpreter automatically loops over each of the elements in the List, "
"running the Function that you provide. Each time the Function is run, it "
"receives the current List item, and its index number in the List, in that "
"order. So the Function in this loop simply uses \"set\" to change the "
"\"frequency\" argument."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Take special note that the arguments in this case are not identical to those "
"given with the \"new\" message. Compare the two forms below:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"SynthDef.new( <replaceable>\\SynthName</replaceable>, "
"[<replaceable>\\parameter1</replaceable>,<replaceable>value</"
"replaceable>,<replaceable>\\parameter2</replaceable>,<replaceable>value</"
"replaceable>] );"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"<replaceable>existingSynth</replaceable>.set( <replaceable>\\parameter1</"
"replaceable>, <replaceable>value</replaceable>, <replaceable>\\parmeter2</"
"replaceable>, <replaceable>value</replaceable> );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"To get rid of one synth without stopping all sound, send its corresponding "
"Synth the \"free\" message:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "<replaceable>variableHoldingSynth</replaceable>.free;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This stops the synth and frees the associated memory - on the server. Your "
"Synth Object still exists in the interpreter, but you can't use it any more. "
"A Synth Object represents a synth on the server; since you got rid of the "
"synth on the server, the Synth Object represents something that doesn't "
"exist. If you attempt to send the \"free\" message again, you'll get an "
"error. For this reason, it's a good idea to get rid of the Synth Object at "
"the same time:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"&lt;replaceable&gt;variableHoldingSynth&lt;/replaceable&gt;.free;\n"
"&lt;replaceable&gt;variableHoldingSynth&lt;/replaceable&gt; = nil;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you accidentally send \"free\" to an already-freed Synth, the interpreter "
"will cause an error, and program execution will stop. If you accidentally "
"send \"free\" to a variable set to \"nil\", nothing will happen. Proactively "
"avoiding mistakes like this is good programming practice."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Busses"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<application>SuperCollider</application> busses work just like busses in "
"other audio creation contexts, which work similarly to busses used to "
"transport humans. Busses are used to send audio from one place to another, "
"and in <application>SuperCollider</application> they can also be used to "
"send control-rate signals. Each <application>SuperCollider</application> bus "
"is given an index number, which are integers starting at 0. Audio-rate "
"busses and control-rate busses are independent, and are given an independent "
"set of index numbers. Any number of unique signals can be routed into a bus, "
"and any number of receivers can take signals from a bus - but the signal "
"will be the sum of all the input signals. In other words, if you want to "
"send two different sets of signals, you need two different busses with "
"different index numbers."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Audio-Rate Bus Numbers"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are special audio-rate busses reserved automatically by the server. "
"These interact with the audio interface, allowing you to get sound from its "
"inputs, and send sound to its outputs. The lowest audio-rate bus numbers are "
"reserved for audio interface outputs, each channel receiving an independent "
"bus. The bus numbers just above those are reserved for audio interface "
"inputs, each channel receiving an independent bus."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"For a simple audio interface with two channels each for input and output, "
"the pre-reserved audio-rate bus numbers would be these:"
msgstr ""

#. Tag: para
#, no-c-format
msgid "0 for left channel output"
msgstr ""

#. Tag: para
#, no-c-format
msgid "1 for right channel output"
msgstr ""

#. Tag: para
#, no-c-format
msgid "2 for left channel input"
msgstr ""

#. Tag: para
#, no-c-format
msgid "3 for right channel input"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now you can change the first argument of the \"Out\" UGen as desired!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Out and In UGens"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The \"Out\" UGen is discussed in <xref linkend=\"sect-Musicians_Guide-SC-"
"Basic_Programming-SynthDef_and_Synth-Out_UGen\" />. What it does is take a "
"signal and route it to the specified bus number. The \"In\" UGen performs a "
"similar action: take a signal from a bus number, and make it available for "
"use."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is the syntax to use for the <classname>Out</classname> UGen: "
"<funcsynopsis> <funcprototype> <funcdef><function>Out.ar</function></"
"funcdef> <paramdef><parameter>busNumber</parameter></paramdef> "
"<paramdef><parameter>audioRateUGen</parameter></paramdef> </funcprototype> </"
"funcsynopsis> or <funcsynopsis> <funcprototype> <funcdef><function>Out.kr</"
"function></funcdef> <paramdef><parameter>busNumber</parameter></paramdef> "
"<paramdef><parameter>controlRateUGen</parameter></paramdef> </funcprototype> "
"</funcsynopsis> The UGen enclosed here should not be enclosed in a Function. "
"If the UGen provides multi-channel output, \"Out\" will automatically route "
"the lowest channel to the specified bus number, the next channel to the next "
"highest bus number, and so on. This way, you can achieve stereo output with "
"one \"Out\" UGen."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This is the syntax to use for the <classname>In</classname> UGen: "
"<funcsynopsis> <funcprototype> <funcdef><function>In.ar</function></funcdef> "
"<paramdef><parameter>busNumber</parameter></paramdef> "
"<paramdef><parameter>numberOfChannels</parameter></paramdef> </"
"funcprototype> </funcsynopsis> or <funcsynopsis> <funcprototype> "
"<funcdef><function>In.kr</function></funcdef> "
"<paramdef><parameter>busNumber</parameter></paramdef> "
"<paramdef><parameter>numberOfChannels</parameter></paramdef> </"
"funcprototype> </funcsynopsis> Whereas \"Out\" automatically outputs the "
"right number of channels based on how many you provide, \"In\" requires that "
"you specify how many channels you want it to fetch for you."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When created with this form, both of these UGens automatically connect to "
"the default server, stored in the single-letter \"s\" variable by the "
"interpreter."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Bus Objects"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"As SynthDef and Synth represent things stored on the server, the interpreter "
"provides us with an instantiable \"Bus\" Class that represents the server's "
"busses. In many programs that you write, you won't need to use a Bus Object -"
" particularly when you're doing simple input and output with the "
"automatically-reserved bus numbers. But, like the SynthDef and Synth Classes "
"make it easier to deal with synthdefs and synths on the server (which are "
"very difficult to deal with directly), the Bus Class makes it easier to deal "
"with busses on the server, and provides some extra functionality to boot!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The primary advantage of using Bus Objects is that you don't have to keep "
"track of bus numbers, whether they're being used, and how mnany channels are "
"being routed. For simple input and output of audio-rate signals, you're "
"better off simply remembering the bus numbers"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <literal>new</literal> message creates a new Bus object. This is the "
"syntax: <funcsynopsis> <funcprototype> <funcdef><function>Bus.audio</"
"function></funcdef> <paramdef><parameter>serverName</parameter></paramdef> "
"<paramdef><parameter>numberOfChannels</parameter></paramdef> </"
"funcprototype> </funcsynopsis> or <funcsynopsis> <funcprototype> "
"<funcdef><function>Bus.control</function></funcdef> "
"<paramdef><parameter>serverName</parameter></paramdef> "
"<paramdef><parameter>numberOfChannels</parameter></paramdef> </"
"funcprototype> </funcsynopsis> The interpreter takes \"numberOfChannels\" "
"busses on the \"serverName\" server, and groups them together for multi-"
"channel use in one Bus Object, which it returns to you. The "
"\"numberOfChannels\" argument is optional; if you leave it out, the Bus "
"Object will have only one bus, for single-channel signals. You should always "
"assign the object to a variable, or else you have no way to use the bus "
"later:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "var myBus = Bus.audio( s, 2 );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The interpreter also keeps track of which bus numbers are used for which Bus "
"Objects, so the signals will never get confused. Of course, you can still "
"route signals through those bus numbers without using the Bus Object, but "
"the Bus Class helps us to keep things straight."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The following messages/functions can also be used with Bus Objects:"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Some Functions of the <classname>Bus</classname> Class"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Message/Function"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Return Value"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "index"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>b.index;</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "The lowest bus number used by this Bus object."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "numChannels"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>b.numChannels;</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "The number of busses used by this Bus object."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "rate"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>b.rate;</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "Either <literal>audio</literal> or <literal>control</literal>."
msgstr ""

#. Tag: entry
#, no-c-format
msgid "server"
msgstr ""

#. Tag: entry
#, no-c-format
msgid "<code>b.server;</code>"
msgstr ""

#. Tag: entry
#, no-c-format
msgid ""
"The name of the server used by the Bus object. The default server is "
"<literal>localhost</literal>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When you are done with a Bus, you can release the channels for use by other "
"Bus Objects:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"&lt;replaceable&gt;myBusVariable&lt;/replaceable&gt;.free;\n"
"&lt;replaceable&gt;myBusVariable&lt;/replaceable&gt; = nil;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Like when sending the \"free\" message to a Synth Object, you should set the "
"variable name of a \"free'd\" Bus to \"nil\". This will prevent you from "
"accidentally sending audio there after the Bus is released."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using Busses: Control-Rate Example"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The best way to understand how and when to use a bus is to see them in "
"action."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"( // execute first: prepare the server\n"
"   var busAudioSynth =\n"
"   {\n"
"      arg bus, freqOffset = 0;\n"
"\n"
"      Out.ar( 0, SinOsc.ar( freq:( In.kr(bus) + freqOffset ), mul:0.1 ) );\n"
"   };\n"
"\n"
"   var busControlSynth =\n"
"   {\n"
"      arg bus, freq = 400;\n"
"\n"
"      Out.kr( bus, SinOsc.kr( freq:1, mul:( freq/40 ), add:freq ) );\n"
"   };\n"
"\n"
"   SynthDef( \\tutorialAudioBus, busAudioSynth ).send( s );\n"
"   SynthDef( \\tutorialControlBus, busControlSynth ).send( s );\n"
"\n"
"   b = Bus.control( s );\n"
")\n"
"\n"
"( // execute second: create synths\n"
"   x = Synth.new( \\tutorialControlBus, [\\bus, b] ); // control synth\n"
"   y = Synth.after( x, \\tutorialAudioBus, [\\bus, b] ); // low audio synth\n"
"   z = Synth.after( x, \\tutorialAudioBus, [\\bus, b, \\freqOffset, 200] ); /"
"/ high audio synth\n"
")\n"
"\n"
"( // commands to free each Object\n"
"   x.free; x = nil; // control synth\n"
"   y.free; y = nil; // low audio synth\n"
"   z.free; z = nil; // high audio synth\n"
"   b.free; b = nil; // control bus\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This example contains three stages: prepare the server, create the synths, "
"destroy the synths. These three stages will become familiar as you program "
"in <application>SuperCollider</application>, whether or not you use busses "
"frequently. The example is fairly complicated, so the code is explained here:"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>busAudioSynth</function> Function: Accepts two arguments, and "
"creates an audio-rate <classname>SinOsc</classname>, routed to the left "
"output channel. The frequency is determined by a control-rate bus given as "
"an argument, and optionally with an offset that can be supplied as an "
"argument."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<function>busControlSynth</function> Function: Accepts two arguments, and "
"creates a control-rate <classname>SinOsc</classname>, routed to the bus "
"given as an argument. Can also be given a frequency; the value produced by "
"the synth is intended to be used to control pitch. The centre pitch of the "
"oscillation is <literal>freq</literal>, and the range of oscillation is one-"
"twentieth the size of <literal>freq</literal> (one-fourtieth both higher and "
"lower than <literal>freq</literal>)."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"SynthDef: These commands are straight-forward. They send the synthesis "
"definitions to the server."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<code>b = Bus.control( s );</code> : This should also be straight-forward. A "
"single-channel control bus is created, and assigned to the pre-declared "
"variable <literal>b</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"For synth creation, <literal>x</literal> is assigned a control-rate synth, "
"while <literal>y</literal> and <literal>z</literal> are assigned audio-rate "
"synths. Each synth is given the variable <literal>b</literal>, which refers "
"to our control-rate bus. <literal>z</literal> is also given an argument for "
"<literal>\\freqOffset</literal>, which makes its frequency 200&nbsp;Hz "
"higher than the synth assigned to <literal>y</literal>."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Don't worry about the <function>after</function> message for now. It's "
"explained in <xref linkend=\"sect-Musicians_Guide-C-Basic_Programming-"
"Ordering_and_Other_Features-Ordering\" />."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Why Use Global Variables"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Since this is just an example, and not an actual program, the program uses "
"four automatically-declared global variables: <literal>b</literal>, "
"<literal>x</literal>, <literal>y</literal>, and <literal>z</literal>. "
"Because these variables are shared with everything, it's especially "
"important to set them to <literal>nil</literal> when you're done. If this "
"were going to be written into a real program, it would be a good idea to "
"change the variables to something which can't be accessed by other programs."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Why Use a Bus"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The control-rate bus in this example might seem trivial and pointless to "
"you, especially since the use of a UGen to control frequency has already "
"been illustrated in other examples. For this particular program, a control-"
"rate UGen would probably have been a better choice, but remember that this "
"is just an example."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here are some advantages to using a control-rate Bus over a UGen:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The signal can be changed without sending the <literal>set</literal> message "
"to the audio-rate UGen, simply by changing the input to the bus."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Input to the bus can be produced by any number of control-rate UGen's."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The signal in the bus can be received by more than one UGen, as it is in "
"this example. One thousand audio-rate UGen's powered by 25 control-rate "
"UGen's is a much better solution than if each audio-rate UGen were powered "
"by its own control-rate UGen."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Busses can be accessed quickly and efficiently from any place in the program "
"that has access to the variable holding the Bus. It's easier and safer (less "
"error-prone) than making all of your UGen's equally accessible."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Some of these advantages could be seen as disadvantages. Whether you should "
"use a Bus or a UGen depends on the particular application. The simpler "
"solution is usually the better one, as long as you remember to avoid "
"repetition!"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Special Note about Control-Rate Busses"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Control-rate Bus'ses are a great way to enhance the flexibility of your "
"program. The best part is that, in order to use a control-rate Bus, the UGen "
"doesn't even need to have been written to accomodate it."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "{ SinOsc.ar( freq:In.kr( controlRateBus, 1 ), mul:0.2 ); }.play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now you've managed to spice up an otherwise-boring synth!"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Also, control-rate Bus'ses don't need to be constantly changing. Unlike an "
"audio-rate Bus, a control-rate Bus will hold the last-inputted value until "
"another value is provided. You can the value of a control-rate Bus with the "
"<function>set</function> message (and a single argument, which is the value)."
" You can also get the current value, whether created by <function>set</"
"function> or a UGen, by using the <function>get</function> message, and "
"sending a Function with one argument."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var bus = Bus.control( s );\n"
"   bus.set( 12 );\n"
"   bus.get( { arg val; val.postln; } );\n"
"   bus.free; bus = nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"When running this example, you'll notice that the <literal>12</literal> "
"doesn't get posted until <emphasis>after</emphasis> the program finishes "
"with <literal>nil</literal>. This is because of the <firstterm>latency</"
"firstterm> between when the interpreter asks the server to do something, and "
"when the server does it. The amount of time it takes for the server to "
"complete a command is usually very small, but as you can see, it can make an "
"important difference to your program. This latency is also the reason that "
"you can't call <code>SynthDef.new( <replaceable>...</replaceable> )</code> "
"and <code>Synth.new( <replaceable>...</replaceable> )</code> at the exact "
"same time."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This latency is also the reason that we have to provide a single-argument "
"function as an argument to the <function>get</function> function. Since the "
"function won't immediately be able to get the value of the bus from the "
"server, we can't expect the value to be returned by the function. Instead, "
"when \"get\" gets the value of the bus from the server, it runs the function "
"that you gave it."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Using Busses: Audio-Rate Example"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"\n"
"(\n"
"   var tutorialDecayPink =\n"
"   {\n"
"      arg outBus = 0, effectBus,\n"
"      direct = 0.5; // controls proportion of \"direct\" / \"processed\" "
"sound\n"
"      var source;\n"
"\n"
"      // Decaying pulses of PinkNoise.\n"
"      source = Decay2.ar( in:Impulse.ar( freq:1, phase:0.25 ),\n"
"                          attackTime:0.01,\n"
"                          decayTime:0.2,\n"
"                          mul:PinkNoise.ar\n"
"                        );\n"
"\n"
"      Out.ar( outBus, (source*direct) ); // main output\n"
"      Out.ar( effectBus, (source*(1-direct)) ); // effects output\n"
"   };\n"
"\n"
"   var tutorialDecaySine =\n"
"   {\n"
"      arg outBus = 0, effectBus,\n"
"      direct = 0.5; // controls proportion of \"direct\" / \"processed\" "
"sound\n"
"      var source;\n"
"\n"
"      // Decaying pulses of a modulating Sine wave.\n"
"      source = Decay2.ar( in:Impulse.ar( freq:0.3, phase: 0.25),\n"
"                          attackTime:0.3,\n"
"                          decayTime:1,\n"
"                          mul:SinOsc.ar( freq:SinOsc.kr( freq:0.2, mul:110, "
"add:440) )\n"
"                        );\n"
"\n"
"      Out.ar(outBus, (source*direct) ); // main output\n"
"      Out.ar(effectBus, (source*(1-direct)) ); // effects output\n"
"   };\n"
"\n"
"   var tutorialReverb =\n"
"   {\n"
"      arg outBus = 0, inBus; // default outBus is audio interface\n"
"      var input;\n"
"\n"
"      input = In.ar( inBus, 1 );\n"
"\n"
"      16.do( { input = AllpassC.ar( in:input,\n"
"                                    maxdelaytime:0.04,\n"
"                                    delaytime:{ Rand(0.001,0.04) }.dup,\n"
"                                    decaytime:3\n"
"                                  )\n"
"             }\n"
"           );\n"
"\n"
"      Out.ar( outBus, input );\n"
"   };\n"
"\n"
"   // send synthesis information to the server\n"
"   SynthDef( \\tutorialReverb, tutorialReverb ).send( s );\n"
"   SynthDef( \\tutorialDecayPink, tutorialDecayPink ).send( s );\n"
"   SynthDef( \\tutorialDecaySine, tutorialDecaySine ).send( s );\n"
"\n"
"   // reserve an effects Bus\n"
"   b = Bus.audio( s );\n"
")\n"
"\n"
"(\n"
"   x = Synth.new( \\tutorialReverb, [\\inBus, b] );\n"
"   y = Synth.before( x, \\tutorialDecayPink, [\\effectBus, b] );\n"
"   z = Synth.before( x, \\tutorialDecaySine, [\\effectBus, b, \\outBus, 1] "
");\n"
")\n"
"\n"
"// Change the balance of \"wet\" to \"dry\"\n"
"y.set( \\direct, 1 ); // only direct PinkNoise\n"
"z.set( \\direct, 1 ); // only direct Sine wave\n"
"y.set( \\direct, 0 ); // only reverberated PinkNoise\n"
"z.set( \\direct, 0 ); // only reverberated Sine wave\n"
"y.set( \\direct, 0.5 ); // original PinkNoise\n"
"z.set( \\direct, 0.5 ); // original Sine wave\n"
"\n"
"( // commands to free each Object\n"
"   x.free; x = nil;\n"
"   y.free; y = nil;\n"
"   z.free; z = nil;\n"
"   b.free; b = nil;\n"
")\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"I'm not going to explain this example as extensively as the previous one. "
"It's definitely the most complex example so far. It's better if you figure "
"out what the parts do by playing with them yourself. The bus works by "
"routing audio from the <literal>\\tutorialDecayPink</literal> and "
"<literal>\\tutorialDecaySine</literal> synths into the "
"<literal>\\tutorialReverb</literal> synth. The first two synths can be "
"controlled to put all, none, or some of their signal into the bus (so that "
"it goes through the <literal>\\tutorialReverb</literal> synth), or straight "
"out the audio interface (bypassing the <literal>\\tutorialReverb</literal> "
"synth). Notice that the <emphasis>same</emphasis> effects processor is "
"operating on two different input sources."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Ordering and Other Synth Features"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This section discusses the important topic of creating and enforcing an "
"\"order\" on the server. Because this is done with Functions (or methods) "
"from the Synth Class, other useful Functions from the Class are discussed "
"here."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Ordering"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Ordering is instructing the server to calculate in a particular order. The "
"audio synthesized by the server takes the same form as any other digital "
"audio: a series of samples are played at a particular speed (called sample "
"rate), each with a set number of bits per sample (called sample format). For "
"each sample, the server calculates the signal at that point in a pre-"
"determined order. Each sample is calculated from scratch, so if a particular "
"UGen depends on the output of another UGen, the other one had better be "
"calculated first. For more information on samples, sample rate, and sample "
"format, see <xref linkend=\"sect-Musicians_Guide-"
"Sample_Rate_and_Sample_Format\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Consider the following example:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"{ SinOsc.ar( freq:SinOsc.kr( freq:1, add:500, mul:10 ), mul:0.2 ); }.play;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"What happens if the server calculates the audio-rate UGen first? It wouldn't "
"have a frequency. This is another one of those things which the interpreter "
"takes care of automatically when we run Function rather than create a Synth. "
"Since it's often preferable to use a synth instead of a Function, we need "
"some way to control the order of execution. The interpreter and the server "
"are only so good at guessing what we need, after all."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are two methods in the <classname>Synth</classname> Class that we can "
"use to inform the server about our desired order of execution: \"before\" "
"and \"after\". They represent a small extension to the \"new\" method, and "
"they work like this: <funcsynopsis> <funcprototype> <funcdef><function>Synth."
"before</function></funcdef> <paramdef><parameter>variableHoldingSynth</"
"parameter></paramdef> <paramdef><parameter>nameOfSynthDef</parameter></"
"paramdef> <paramdef><parameter>ListOfArguments</parameter></paramdef> </"
"funcprototype> </funcsynopsis> and <funcsynopsis> <funcprototype> "
"<funcdef><function>Synth.after</function></funcdef> "
"<paramdef><parameter>variableHoldingSynth</parameter></paramdef> "
"<paramdef><parameter>nameOfSynthDef</parameter></paramdef> "
"<paramdef><parameter>ListOfArguments</parameter></paramdef> </funcprototype> "
"</funcsynopsis> And it works just as it looks, too: the server creates a new "
"synth, adds it before or after the synth represented by "
"\"variableHoldingSynth\" (depending on which Function you use), and uses "
"\"nameOfSynthDef\" and \"ListOfArguments\" just as in the \"add\" method. "
"This example, from <xref linkend=\"sect-Musicians_Guide-SC-Basic_Programming-"
"Busses-Control_Rate_Bus_Example\" />, uses the \"after\" Function to ensure "
"that the control-rate synth is calculated before the audio-rate synths that "
"depend on it."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"In this case, the control-rate synth is created before the audio-rate synths "
"- probably the easier way to think about it. Even so, it's possible to add "
"them in the opposite order with a little extra thought."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The other example from <xref linkend=\"sect-Musicians_Guide-SC-"
"Basic_Programming-Busses\" /> use the \"before\" Function to ensure that the "
"\"pink noise\" and \"sine wave\" UGen's were calculated before the "
"\"reverberation\" UGen. Especially since these are all audio-rate UGen's, "
"the server would not reasonably know which to calculate first, so you need "
"to let it know."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Changing the Order"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<application>SuperCollider</application> offers equally easy-to-use methods "
"to change the order of execution."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"To move a synth's execution after another: <funcsynopsis> <funcprototype> "
"<funcdef><replaceable>variableHoldingSynth</replaceable><function>moveAfter</"
"function></funcdef> <paramdef><parameter>variableHoldingAnotherSynth</"
"parameter></paramdef> </funcprototype> </funcsynopsis>"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"To move a synth's execution before another: <funcsynopsis> <funcprototype> "
"<funcdef><replaceable>variableHoldingSynth</"
"replaceable><function>moveBefore</function></funcdef> "
"<paramdef><parameter>variableHoldingAnotherSynth</parameter></paramdef> </"
"funcprototype> </funcsynopsis>"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Replace a Running Synth"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The server allows you to replace a running synth with a newly-created one, "
"maintaining all of the ordering relationships."
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is the syntax:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"variableHoldingNewSynth = Synth.replace( variableHoldingSynthToReplace, "
"nameOfSynthDef, ListOfArguments );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The \"variableHoldingNewSynth\" will often be the same as the "
"\"variableHoldingSynthToReplace,\" but not always. When you use this "
"Function, the synth being replaced is freed from the server (equivalent to "
"running \"free\"), so that variable should always be assigned something."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Pausing and Restarting a Synth"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The server allows you to temporarily pause and later re-start a synth, "
"without freeing and re-creating it."
msgstr ""

#. Tag: para
#, no-c-format
msgid "To pause a synth:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "<replaceable>variableHoldingSynth</replaceable>.run( false );"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To re-start a synth:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "<replaceable>variableHoldingSynth</replaceable>.run( true );"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Scheduling"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The practice of scheduling allows you to making things happen in a pre-"
"determined amount of time. Scheduling is very different from ordering: "
"ordering is a primarily technical consideration to ensure that the server "
"synthesizes the sound in the right order; scheduling is a primarily musical "
"consideration that allows you to control the perceived time that things "
"happen."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Clocks"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"SuperCollider's clocks have two main functions: they know what time it is, "
"and they know what time things are supposed to happen."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are three types of clocks, which each do slightly different things:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"TempoClock: These clocks are aware of metre (time signature) changes, and "
"have an adjustable tempo. They are to be used for scheduling musical events, "
"and they run with a high priority."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"SystemClock: This clock always runs in seconds. It can be used to schedule "
"musical events, since it runs with a high priority. There is only one "
"SystemClock."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"AppClock: These clocks always run in seconds. They are to be used for "
"graphic events and other non-musical things not discussed in this guide. "
"These clocks do not run with a high priority, so they can be temporarily "
"\"side-lined\" by a TempoClock or the SystemClock, if one of those has "
"something to do urgently."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Default Clocks"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <application>SuperCollider</application> interpreter provides two "
"default clocks, and one default pseudo-clock."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <classname>SystemClock</classname> always operates in seconds, and it "
"can be used to schedule musical events, but usually this isn't necessary."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <code>TempoClock.default</code> runs at 60 beats-per-minute by default "
"(equal to one beat per second). Since it's accessible from anywhere within a "
"program, any tempo changes will have an effect on the scheduling of the "
"entire program - so be careful! If you don't want something to be effected "
"by tempo changes, you can create a new TempoClock just for that part of the "
"program. If you will be using this clock frequently, you can assign it to a "
"variable like this:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "var t = TempoClock.default;"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <code>thisThread.clock</code> is not really a clock in itself, but "
"refers to the clock which is responsible for scheduling the part of the "
"program where the command is written. It can be a little bit tricky working "
"with this clock, since it may be either the SystemClock or a TempoClock."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Finding the Current Time"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Using the \"beats\" method on a clock will return that clock's current time. "
"Try running each of the following:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"SystemClock.beats;\n"
"TempoClock.default.beats;\n"
"thisThread.clock.beats;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This can be useful for scheduling events in an absolute way, or for a number "
"of other things."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Relative Scheduling"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The standard way to schedule things is in a certain number of beats from now."
" If you're scheduling on a SystemClock, one beat is equal to one second. If "
"you're scheduling on a TempoClock, one beat is equal to whatever the current "
"setting is."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"To schedule things on a clock, use the \"sched\" Function: <funcsynopsis> "
"<funcprototype> <funcdef><replaceable>nameOfClock</"
"replaceable><function>sched</function></funcdef> "
"<paramdef><parameter>beatsFromNow</parameter></paramdef> "
"<paramdef><parameter>FunctionToExecute</parameter></paramdef> </"
"funcprototype> </funcsynopsis> The interpreter will let you schedule just "
"about anything, but there's no point in scheduling something other than a "
"Function: scheduling a five won't have any effect - try it!"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "SystemClock.sched( 5, 5 );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"It looks like nothing happens. The <literal>5</literal> does happen, but... "
"well... it doesn't do anything. Scheduling a Function <emphasis>will</"
"emphasis> do something:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "SystemClock.sched( 5, { 5.postln; } );"
msgstr ""

#. Tag: para
#, no-c-format
msgid "When you run this, there are two things to notice:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The interpreter prints out \"SystemClock\" first. This is to let you know "
"that it did the scheduling as requested."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The five prints out endlessly, in five-second intervals. For an explanation, "
"see \"Repeated Scheduling\""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Repeated Scheduling"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you schedule a Function that returns a number, the interpreter will "
"schedule the Function to re-run in that many beats."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This will print \"5\" every five seconds, until you press [Esc] to stop "
"execution."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"To avoid this, you can end your Function with <literal>nil</literal>, which "
"has been done sometimes through this guide."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "SystemClock.sched( 5, { 5.postln; nil; } );"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This will print <literal>5</literal> in five seconds, and then stop."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Working with the TempoClock Class"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Here is a brief explanation of some Functions available with the TempoClock "
"Class. Throughout this section, the variable \"t\" is used to represent any "
"particular TempoClock."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "var t = TempoClock.new( tempo, beats );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This creates a new TempoClock. The arguments are optional, and have the "
"following meanings:"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"tempo: tempo of the clock, given in beats per second. To input a value in "
"beats-per-minute, divide it by 60. Defaults to 60 beats per minute, or one "
"per second."
msgstr ""

#. Tag: para
#, no-c-format
msgid "beats: starts the clock at this time. Default is zero."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"t.stop;\n"
"t = nil;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Equivalent to the \"free\" method for a Synth of Bus Object. This stops the "
"clock, discards all scheduled events, and releases the resources used to run "
"the clock. Setting the variable to \"nil\" afterwards is optional, but "
"recommended, to avoid later programming mistakes."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "<replaceable>t</replaceable>.clear;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Discards all scheduled events, but keeps the clock running."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "<replaceable>t</replaceable>.tempo;"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Returns the current tempo in beats-per-second."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"<replaceable>t</replaceable>.tempo_( <replaceable>newTempo</replaceable> );"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Allows you to change the clock's tempo. The new tempo should be in beats-per-"
"second. To input a tempo in beats-per-minute, divide the value by 60."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid ""
"<replaceable>t</replaceable>.play( <replaceable>aFunction</replaceable> );"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Schedules the Function to begin execution on the next beat."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"There are many other Functions in the TempoClock Class, related to absolute "
"scheduling, scheduling with bars, and conversion of beats to and from "
"seconds."
msgstr ""

#. Tag: title
#, no-c-format
msgid "How to Get Help"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"Knowing how to get help in <application>SuperCollider</application> is going "
"to play a large part in determining whether you have a productive or "
"frustrating relationship with the language and its components. There are a "
"large number of ways to get help, but here are some of the most helpful."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Use the <application>SuperCollider</application> Help Files"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"<application>SuperCollider</application> comes with an extensive collection "
"of help files, which contain the answers to most of your problems. The "
"difficulty will be in finding the solution - it's not always located where "
"you think it is, because it often isn't the solution you think it will be."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"On &OPERATING_SYSTEM; systems, the main help file is located at [file:///usr/"
"share/SuperCollider/Help/Help.html this URL], and it can be viewed in any "
"web browser. It may also be helpful to browse the directory structure of the "
"help files, located at [file:///usr/share/SuperCollider/Help this URL], "
"which can also be viewed in your web browser."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you're looking for further explanations of material in this tutorial, you "
"could start by reviewing the [file:///usr/share/SuperCollider/Help/Tutorials/"
"Getting-Started/Getting%20Started%20With%20SC.html Getting Started With "
"<application>SuperCollider</application>] tutorial, on which this document "
"is based. The sections in that tutorial roughly correspond to the sections "
"in this guide."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Internet Relay Chat (IRC)"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you know how to use Internet Relay Chat (IRC), you can join the "
"#supercollider channel on the Freenode network. The channel does not usually "
"have a large number of participants or a lot of activity, but the users are "
"some of the most polite and helpful on the internet."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Email"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"If you feel comfortable sending an email to a mailing list, you can use the "
"<citetitle>sc-users Mailing List</citetitle>, available at <ulink url=\"http:"
"//www.beast.bham.ac.uk/research/sc_mailing_lists.shtml\" />. If you decide "
"to subscribe to this list, be aware that it receives a large amount of mail "
"every day."
msgstr ""

#. Tag: title
#, no-c-format
msgid "The <application>SuperCollider</application> Website"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The <citetitle><application>SuperCollider</application> Website</citetitle> "
"at SourceForge (<ulink url=\"http://supercollider.sourceforge.net/\" />) "
"offers links to many resources."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Legal Attribution"
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This portion of the &O_S; Musicians' Guide, called \"Basic Programming with "
"<application>SuperCollider</application>,\" is a derivative work of the, "
"<citetitle>Getting Started With <application>SuperCollider</application></"
"citetitle> tutorial. The original work was created by Scott Wilson, James "
"Harkins, and the <application>SuperCollider</application> development team. "
"It is available on the internet from <ulink url=\"http://supercollider.svn."
"sourceforge.net/viewvc/supercollider/trunk/common/build/Help/Tutorials/"
"Getting-Started/Getting%20Started%20With%20SC.html\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"The original document, like all <application>SuperCollider</application> "
"documentation, is licenced under the Creative Commons' "
"<citetitle>Attribution Share-Alike 3.0 Unported Licence</citetitle>, "
"accessible on the internet at <ulink url=\"http://creativecommons.org/"
"licenses/by-sa/3.0/\" />."
msgstr ""

#. Tag: para
#, no-c-format
msgid ""
"This usage should in no way be construed as an endorsement of the Fedora "
"Project, the Musicians' Guide, or any other party by the "
"<application>SuperCollider</application> development team."
msgstr ""

